# Executer quand:
# - Lint
# ** Toutes les modifications dans les .yaml / .yml

lint:helm-chart:
  stage: lint
  image:
    name: alpine/helm
    entrypoint: [""] # avoid error message on start : Error: unknown command "sh" for "helm"
  script:
    - |-
      for HELM_PROJECT in $(find . -mindepth 1 -maxdepth 1 -type d ! -name ".git" -exec basename {} \;)
      do
        if [ -e "${CI_PROJECT_DIR}/${HELM_PROJECT}/Chart.yaml" ]; then
          helm dependency update ${HELM_PROJECT} || true
          if [[ -e "${HELM_PROJECT}/test_chart_values.yaml" ]]; then
            TEST_FILE="test_chart_values"
          else
            TEST_FILE="values"
          fi
          if [[ -e "${HELM_PROJECT}/values_secrets.yaml" ]]; then
            helm lint "${HELM_PROJECT}" -f "${HELM_PROJECT}/${TEST_FILE}.yaml" -f "${HELM_PROJECT}/values_secrets.yaml"
            helm template -f "${HELM_PROJECT}/${TEST_FILE}.yaml" -f "${HELM_PROJECT}/values_secrets.yaml" "${HELM_PROJECT}" > "${HELM_PROJECT}.template"
          else
            helm lint "${HELM_PROJECT}" -f "${HELM_PROJECT}/${TEST_FILE}.yaml"
            helm template -f "${HELM_PROJECT}/${TEST_FILE}.yaml" "${HELM_PROJECT}" > "${HELM_PROJECT}.template"
          fi
        fi
      done
  rules:
    - changes:
        - ".gitlab/**/*.{yml,yaml}"
        - ".gitlab-ci.{yml,yaml}"
      when: never
    - changes:
        - "**/*.{yaml,yml}"

package:helm-chart:
  stage: package
  image:
    name: alpine/helm
    entrypoint: [""] # avoid error message on start : Error: unknown command "sh" for "helm"
  variables:
    INSTALL_ADDITIONAL_PACKAGES: curl yq jq bash
  before_script:
    - !reference [.git_with_ssh:alpine, before_script]
    - git remote set-url origin git@${CI_SERVER_HOST}:${CI_PROJECT_PATH}.git
    - chmod u+x .gitlab/scripts/bash/package_helm_chart.bash
  script:
    - .gitlab/scripts/bash/package_helm_chart.bash
  artifacts:
    expire_in: 5 days
    paths:
      - "*.template"
    reports:
      dotenv: upload.env
  rules:
    - if: $CI_PIPELINE_SOURCE =~ /^(web)$/
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^(master|coog-(([[:digit:]]{1,2}).([[:digit:]]{1,2})))$/'
      changes:
        - "**/Chart.{yaml,yml}"

update:readme:
  stage: update
  image: golang:alpine
  variables:
    GO111MODULE: "on"
  before_script:
    - |-
      if [ "$HELM_NEW_CHART" != "true" ]; then
        echo "Charts didn't change, nothing to update"
        exit 0
      fi
    - !reference [.git_with_ssh:alpine, before_script]
    - go install github.com/norwoodj/helm-docs/cmd/helm-docs@latest
    - git remote set-url origin git@${CI_SERVER_HOST}:${CI_PROJECT_PATH}.git
  script:
    - helm-docs
    - git status | awk '/modified/{print $2}' | grep README.md | xargs git add
    - git commit -m "Generate README for charts with helm-docs"
    - git push origin HEAD:${CI_COMMIT_BRANCH}
  artifacts:
    expire_in: 2 hours
    paths:
      - "**/README.md"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH =~ /^(master|coog-(([[:digit:]]{1,2}).([[:digit:]]{1,2})))$/'
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^(master|coog-(([[:digit:]]{1,2}).([[:digit:]]{1,2})))$/'
      changes:
        - "**/Chart.{yaml,yml}"

  needs:
    - package:helm-chart
  allow_failure: true

coreye:synchronize:coog:
  stage: coreye
  image: bitnami/git
  variables:
    REPOSITORY_SSH_KEY: "${SSH_KEY}"
    INSTALL_ADDITIONAL_PACKAGES: curl
  before_script:
    - |-
      if [ "$HELM_NEW_CHART" != "true" ]; then
        echo "Charts didn't change, nothing to update"
        exit 0
      fi
    - !reference [.git_with_ssh:debian, before_script]
  script:
    - git clone --single-branch --branch "${CI_COMMIT_REF_NAME}" https://${COREYE_REPO_USER}:${COREYE_REPO_TOKEN}@git.coreye.fr/coopengo/artifacts/coopengo_helm_charts.git
    - cd coopengo_helm_charts
    - git remote set-url origin https://${COREYE_REPO_USER}:${COREYE_REPO_TOKEN}@git.coreye.fr/coopengo/artifacts/coopengo_helm_charts.git
    - rm -rf charts/coog
    - cp -R "${CI_PROJECT_DIR}/coog" charts/.
    - git add .
    - git commit -m "Synchronize Repository from Coopengo repository"
    - git push
    - echo "${HELM_PROJECT_VERSION}"
    - |-
      curl -X POST \
        -F token=${COREYE_TRIGGER_TOKEN} \
        -F ref=${CI_COMMIT_REF_NAME} \
        -F "variables[IMAGE_TAG]=${HELM_PROJECT_VERSION}" \
        -F "variables[SERVICE]=coog" \
        https://git.coreye.fr/api/v4/projects/434/trigger/pipeline
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH =~ /^(master|coog-(([[:digit:]]{1,2}).([[:digit:]]{1,2})))$/'
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^(master|coog-(([[:digit:]]{1,2}).([[:digit:]]{1,2})))$/'
      changes:
        - "**/Chart.{yaml,yml}"
  needs:
    - package:helm-chart
    - update:readme