stages:
  - synchronize
  - lint
  - package
  - update
  - coreye

synchronize:pipeline:
  stage: synchronize
  image: bitnami/git:latest
  variables:
    REPOSITORY_SSH_KEY: "${SSH_KEY}"
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H "${CI_SERVER_HOST}" >>~/.ssh/known_hosts
    - echo "${REPOSITORY_SSH_KEY}" >~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "🤖 GitLab CI/CD 🤖"
    - git remote set-url origin git@${CI_SERVER_HOST}:${CI_PROJECT_PATH}.git
    - git fetch --all
  script:
    - |-
      for BRANCH in $(git ls-remote --refs -h origin -l "coog-*" | cut -s -d '/' -f3 | grep -E "^(coog-[[:digit:]]{1,2}).([[:digit:]]{1,2})$" )
      do
        git checkout "${BRANCH}"
        git checkout "${CI_COMMIT_SHORT_SHA}" .gitlab-ci.yml README.md
        git commit -m "Merge .gitlab-ci.yml REAMDME.md from \"${CI_COMMIT_SHORT_SHA}\""
      done
      git push --all
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
      changes:
        - ".gitlab-ci.yml"
        - "README.md"

lint:helm-chart:
  stage: lint
  image:
    name: alpine/helm
    entrypoint: [""] # avoid error message on start : Error: unknown command "sh" for "helm"
  script:
    - |-
      for HELM_PROJECT in $(find . -mindepth 1 -maxdepth 1 -type d ! -name ".git" -exec basename {} \;)
      do
        helm dependency update ${HELM_PROJECT} || true
        if [[ -e "${HELM_PROJECT}/values_secrets.yaml" ]]; then
          helm lint "${HELM_PROJECT}" -f "${HELM_PROJECT}/values.yaml" -f "${HELM_PROJECT}/values_secrets.yaml"
          helm template -f "${HELM_PROJECT}/values.yaml" -f "${HELM_PROJECT}/values_secrets.yaml" "${HELM_PROJECT}" > "${HELM_PROJECT}.template"
        else
          helm lint "${HELM_PROJECT}" -f "${HELM_PROJECT}/values.yaml"
          helm template -f "${HELM_PROJECT}/values.yaml" "${HELM_PROJECT}" > "${HELM_PROJECT}.template"
        fi
      done
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      changes:
        - "**/*.yaml"

trigger:automatic-generation:
  stage: package
  image: bitnami/git
  script:
    - |-
      for BRANCH in $(git ls-remote --head "${CI_REPOSITORY_URL}" -l "coog-*" | cut -d '/' -f3 | grep -E '^(coog-[[:digit:]]{1,2}.[[:digit:]]{1,3})$' | sort -Vr | head -n 4)
      do
        curl -X POST \
          --fail \
          -F "token=${CI_JOB_TOKEN}" \
          -F "ref=${BRANCH}" \
          https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      done
  rules:
    - if: '$CI_PIPELINE_SOURCE =~ /^(web|schedule)$/ && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'

package:automatic-generation:
  stage: package
  image: bitnami/git
  before_script:
    - |-
      if [[ ${CI_COMMIT_BRANCH} == "${CI_DEFAULT_BRANCH}" ]]; then
        VERSION=$(date +%y.%V.%y%V)
      else
        VERSION="${CI_COMMIT_BRANCH#coog-}.$(date +%y%V)"
      fi
  script:
    - |-
      for HELM_PROJECT in $(find . -mindepth 1 -maxdepth 1 -type d ! -name ".git" -exec basename {} \;)
      do
        if [ -f "${CI_PROJECT_DIR}/${HELM_PROJECT}/Chart.yaml" ]
        then
          sed -i "/version: /c\version: \'${VERSION}\'" "${CI_PROJECT_DIR}/${HELM_PROJECT}/Chart.yaml"
          git commit -am "Packaging ${VERSION}" || echo "Nothing to commit"
          git push
        fi
      done
  rules:
    - if: '$CI_PIPELINE_SOURCE =~ /^(schedule|trigger)$/ && $CI_COMMIT_REF_NAME =~ /^(master|coog-(([[:digit:]]{1,2}).([[:digit:]]{1,2})))$/'

package:helm-chart:
  stage: package
  image:
    name: alpine/helm
    entrypoint: [""] # avoid error message on start : Error: unknown command "sh" for "helm"
  variables:
    REPOSITORY_SSH_KEY: "${SSH_KEY}"
  before_script:
    - apk add --no-cache curl yq jq git openssh-client
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
    - echo "${REPOSITORY_SSH_KEY}" > ~/.ssh/id_rsa && chmod 400 ~/.ssh/id_rsa
    - ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
    - git config --global user.email "${GITLAB_USER_EMAIL}" &&
      git config --global user.name "🤖 GitLab CI/CD 🤖" &&
      git remote set-url origin git@${CI_SERVER_HOST}:${CI_PROJECT_PATH}.git
  script:
    - |-
      for HELM_PROJECT in $(find . -mindepth 1 -maxdepth 1 -type d ! -name ".git" -exec basename {} \;)
      do
        export HELM_PROJECT_VERSION="$(yq e '.version' "${CI_PROJECT_DIR}/${HELM_PROJECT}/Chart.yaml")"
        if [ -f "${CI_PROJECT_DIR}/${HELM_PROJECT}/Chart.yaml" ]
        then
          if [[ $(curl -s --fail --header --request GET --user gitlab-ci-token:${CI_JOB_TOKEN} "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages?package_type=helm&package_name=${HELM_PROJECT}" | jq -r --arg JQVERSION "${HELM_PROJECT_VERSION}" '.[] | select( .version == $JQVERSION ) | .version') ]]
          then
            echo "Helm package ${HELM_PROJECT}-${HELM_PROJECT_VERSION} already exists."
          else
            if [ "$(git ls-remote --tags origin -l "${HELM_PROJECT}-${HELM_PROJECT_VERSION}")" ]
            then
              echo "TAG ${HELM_PROJECT}-${HELM_PROJECT_VERSION} already exists"
            else
              helm dependency update ${HELM_PROJECT} || true
              if [[ -e "${HELM_PROJECT}/values_secrets.yaml" ]]; then
                helm lint "${HELM_PROJECT}" -f "${HELM_PROJECT}/values.yaml" -f "${HELM_PROJECT}/values_secrets.yaml"
                helm template -f "${HELM_PROJECT}/values.yaml" -f "${HELM_PROJECT}/values_secrets.yaml" "${HELM_PROJECT}" > "${HELM_PROJECT}.template"
              else
                helm lint "${HELM_PROJECT}" -f "${HELM_PROJECT}/values.yaml"
                helm template -f "${HELM_PROJECT}/values.yaml" "${HELM_PROJECT}" > "${HELM_PROJECT}.template"
              fi
              git tag -a ${HELM_PROJECT}-${HELM_PROJECT_VERSION} -m "Create TAG ${HELM_PROJECT}-${HELM_PROJECT_VERSION}"
              git push --tags
              helm package ${HELM_PROJECT}
              helm repo index --url "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable" .
              echo "HELM_NEW_CHART=true" > upload.env
              echo "HELM_PROJECT_VERSION=${HELM_PROJECT_VERSION}" >> upload.env
            curl -s --fail --request POST --user gitlab-ci-token:${CI_JOB_TOKEN} --form "chart=@${HELM_PROJECT}-${HELM_PROJECT_VERSION}.tgz" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/stable/charts"
            fi
          fi
        else
          echo "Directory ${HELM_PROJECT} doesn't have Chart.yaml"
        fi
      done
  artifacts:
    expire_in: 5 days
    paths:
      - "*.template"
    reports:
      dotenv: upload.env
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      changes:
        - "**/Chart.yaml"
    - if: '$CI_PIPELINE_SOURCE == "web"'

update:readme:
  stage: update
  image: golang:alpine
  variables:
    GO111MODULE: "on"
    REPOSITORY_SSH_KEY: "${SSH_KEY}"
  before_script:
    - |-
      if [ "$HELM_NEW_CHART" != "true" ]; then
        echo "Charts didn't change, nothing to update"
        exit 0
      fi
    - apk add --no-cache git openssh-client
    - go install github.com/norwoodj/helm-docs/cmd/helm-docs@latest
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
    - echo "${REPOSITORY_SSH_KEY}" > ~/.ssh/id_rsa && chmod 400 ~/.ssh/id_rsa
    - ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
    - git config --global user.email "${GITLAB_USER_EMAIL}" &&
      git config --global user.name "🤖 GitLab CI/CD 🤖" &&
      git remote set-url origin git@${CI_SERVER_HOST}:${CI_PROJECT_PATH}.git
  script:
    - helm-docs
    - git status | awk '/modified/{print $2}' | grep README.md | xargs git add
    - git commit -m "Generate README for charts with helm-docs"
    - git push origin HEAD:${CI_COMMIT_REF_NAME}
  artifacts:
    expire_in: 2 hours
    paths:
      - "**/README.md"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^(master|coog-(([[:digit:]]{1,2}).([[:digit:]]{1,2})))$/'
      changes:
        - "**/Chart.yaml"
  needs:
    - package:helm-chart
  allow_failure: true

coreye:synchronize:coog:
  stage: coreye
  image: bitnami/git
  variables:
    REPOSITORY_SSH_KEY: "${SSH_KEY}"
  before_script:
    - |-
      if [ "$HELM_NEW_CHART" != "true" ]; then
        echo "Charts didn't change, nothing to update"
        exit 0
      fi
    - apt update &&
      apt install --no-install-recommends --no-install-suggests -y openssh-client curl
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
    - ssh-keyscan -H 'git.coreye.fr' >> ~/.ssh/known_hosts
    - echo "${REPOSITORY_SSH_KEY}" > ~/.ssh/id_rsa && chmod 400 ~/.ssh/id_rsa
    - ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
    - git config --global user.email "${GITLAB_USER_EMAIL}" &&
      git config --global user.name "🤖 GitLab CI/CD 🤖"
  script:
    - git clone --single-branch --branch "${CI_COMMIT_REF_NAME}" https://${COREYE_REPO_USER}:${COREYE_REPO_TOKEN}@git.coreye.fr/coopengo/artifacts/coopengo_helm_charts.git
    - cd coopengo_helm_charts
    - git remote set-url origin https://${COREYE_REPO_USER}:${COREYE_REPO_TOKEN}@git.coreye.fr/coopengo/artifacts/coopengo_helm_charts.git
    - rm -rf coopengo_helm_charts/charts/coog
    - cp -R "${CI_PROJECT_DIR}/coog" charts/.
    - git add .
    - git commit -m "Synchronize Repository from Coopengo repository"
    - git push
    - echo "${HELM_PROJECT_VERSION}"
    - |-
      curl -X POST \
        -F token=${COREYE_TRIGGER_TOKEN} \
        -F ref=${CI_COMMIT_REF_NAME} \
        -F "variables[IMAGE_TAG]=${HELM_PROJECT_VERSION}" \
        -F "variables[SERVICE]=coog" \
        https://git.coreye.fr/api/v4/projects/434/trigger/pipeline
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /^(master|coog-(([[:digit:]]{1,2}).([[:digit:]]{1,2})))$/'
      changes:
        - "**/Chart.yaml"
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME =~ /^(master|coog-(([[:digit:]]{1,2}).([[:digit:]]{1,2})))$/'
  needs:
    - package:helm-chart
    - update:readme
