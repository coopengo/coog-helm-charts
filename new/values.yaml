# Global configuration applied to all components

# -- Number of pod for all components. It can be customized for each component.
# e.g:
# coog:
#   replicaCount: 1
replicaCount: 1

# -- Strategy used to replace old pods with newest. It can be customized for each component.
# e.g:
# coog:
#   strategy:
#     type: Recreate
#
# ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
# values: Recreate or RollingUpdate 
strategy:
  type: Recreate

# -- ## Configure Container Security Context. It can be customized for each component.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param securityContext.runAsUser Set components containers' Security Context runAsUser
securityContext:
  runAsUser: 1000

image:
  # -- Tag applied for all components. It can be customized for each component.
  # e.g:
  # coog:
  #   image:
  #     repository: cooghub
  repository: cooghub

  # -- Tag applied for all components. It can be customized for each component.
  # e.g:
  # coog:
  #   image:
  #     tag: coog-master-latest
  tag: coog-master-latest

  # -- Image Pull Policy applied for all components. It can be customized for each component.
  # e.g:
  # coog:
  #   image:
  #     pullPolicy: Always
  pullPolicy: Always

  # -- secret to be used to download image for all components.
  pullSecrets:
    - name: docker-registry

ingress:
  # -- Default host for the ingress record applied for all ingress. It can be customized for each component.
  # e.g:
  # coog:
  #   ingress:
  #     hosts:
  #       - host: coog.local
  #         path: /
  host: coog.local

  # Can't set key as "tls", else warning for Rabbitmq dependencie
  thisTls:
    # -- Enable TLS configuration for the host defined at `ingress.host` parameter
    # TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.host }}`
    # You can:
    #   - Create a secret with your own certificates.
    #     e.g:
    #     apiVersion: v1
    #     kind: Secret
    #     metadata:
    #       name: coog.local-tls
    #     type: kubernetes.io/tls
    #     data:
    #       server.crt: |
    #            <crt contents here>
    #       server.key: |
    #            <private key contents here>
    #   - Rely on cert-manager to create it by setting the corresponding annotations
    #
    enabled: true

    letsencrypt: true
    # -- TLS configuration for additional hostname(s) to be covered with this ingress record
    # ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    # e.g:
    # configuration:
    # - hosts:
    #     - coog.local
    #   secretName: coog.local-tls
    #
    configuration: []

  # -- Default annotations applied to all ingress. It can be customized for each component
  # e.g:
  # coog:
  #   ingress:
  #     annotations: 
  #       key: value
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/send-timeout: 3600
    nginx.ingress.kubernetes.io/proxy-connect-timeout: 3600
    nginx.ingress.kubernetes.io/proxy-send-timeout: 3600
    nginx.ingress.kubernetes.io/proxy-read-timeout: 3600
    nginx.ingress.kubernetes.io/proxy-body-size: 100m
    nginx.ingress.kubernetes.io/client-body-buffer-size: 100m

  # -- Création de 3 modes de configuration :
  # trustedCidr : mettre en place les IP interne (seront autorisées automatiquement quand le mode maintenance sera actif)
  # publicCidr (global + par composant) : IP externe à autoriser + possibilité de personnaliser par composant (append) - Non pris en compte par le mode maintenance
  nginx:
    whiteList:
      trustedCidr:
        - 127.0.0.1/32
      publicCidr: []

# -- Configure options applied to all deployments, liveness, readiness and startup probes
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
# initialDelaySeconds: Initial delay seconds e
# periodSeconds: Period seconds
# timeoutSeconds: Timeout seconds
# failureThreshold: Failure threshold
# successThreshold: Success threshold
#
# With this configuration, the kubelet will attempt to open a socket to your container on the specified port. 
# If it can establish a connection, the container is considered healthy, if it can't it is considered a failure
livenessProbe:
  initialDelaySeconds: 15
  periodSeconds: 30
  timeoutSeconds: 30
  successThreshold: 1
  failureThreshold: 3

# -- Sometimes, applications are temporarily unable to serve traffic. 
# For example, an application might need to load large data or configuration files during startup, 
# or depend on external services after startup. In such cases, you don't want to kill the application, 
# but you don't want to send it requests either
readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 30
  timeoutSeconds: 30
  successThreshold: 1
  failureThreshold: 3

# -- additional startup time on their first initialization
startupProbe:
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 30
  successThreshold: 1

# -- Node labels for pod assignment. It can be customized for each component
nodeSelector: {}

# -- Tolerations for pod assignment. It can be customized for each component
tolerations: []

# -- Affinity for pod assignment. It can be customized for each component
affinity: {}

#############################################################################################################################

quota:
  enabled: false
  rollingUpdate: false
  config:
    cpuRequest: 0
    memoryRequest: 0
    cpuLimit: 0
    memoryLimit: 0

maintenanceMode:
  enabled: false
  image:
    name: nginx-custom-error-pages
    tag: latest

  config: {}
  #   TEMPLATE_NAME: "coopengo"
  #   DEFAULT_ERROR_PAGE: 404
  #   DEFAULT_HTTP_CODE: 404
  #   SHOW_DETAILS: false
  #   DISABLE_L10N: false

  resources:
    limits:
      cpu: 100m
      memory: 100Mi
    requests:
      cpu: 50m
      memory: 50Mi

  ingress:
    nginx:
      customhttperrors: 403
    annotations: {}

#############################################################################################################################
# Dependencies

# -- Mongodb dependency parameters.
# Ref: https://artifacthub.io/packages/helm/bitnami/mongodb/10.30.12
mongodb:
  # -- Enable to install mongodb on Kubernetes
  # This is a coog parameter not mongodb
  isManaged: true
  # -- Enable to use an external mongodb server (Database not managed by this chart)
  # This is a coog parameter not mongodb
  isExternal: false
  updateStrategy:
    type: Recreate
  service:
    ports:
      mongodb: 27017
  # -- Must be configured when mongodb.isExternal is true
  # This is a coog parameter not mongodb
    external:
      host: ""
  resources:
    limits:
      cpu: 100m
      memory: 300Mi
    requests:
      cpu: 50m
      memory: 150Mi
  volumePermissions:
    enabled: true
    resources:
      limits:
        cpu: 100m
        memory: 300Mi
      requests:
        cpu: 50m
        memory: 150Mi

rabbitmq:
  resources:
    limits:
      cpu: 600m
      memory: 400Mi
    requests:
      cpu: 100m
      memory: 100Mi
  updateStrategyType: RollingUpdate
  extraConfiguration: |-
    consumer_timeout = 172800000
    loopback_users.guest = false
  livenessProbe:
    initialDelaySeconds: 240
  # Voir pour le parametre de persistence > a desactiver


#############################################################################################################################
# coog components mandatory

coog:
  image:
    # -- Image repository to run coog
    name: coog

  strategy:
    type: ""

  containerPorts:
    # -- Listening port of the application in the container
    http: 8000

  # -- coog, celery and batch configuration for number of workers
  workers:
    number: 1
    maximumMemory: 512000
  
  # -- coog and celery configuration for cache
  cache:
    record: 50000
    cleanTimeOut: 0

  # -- Configure environement variables for this component
  # Each value can be modified without override all or delete other parameters
  config:
    COOG_TIMEOUT: 3600
    LOG_LEVEL: INFO
    TRYTOND_DATABASE__LANGUAGE: fr
    TRYTOND_EMAIL__FROM: to_define
    TRYTOND_DEBUG__DISABLE_SYNTAX_ANALYSIS: true
    TRYTOND_BATCH__ENABLE_CELERY_AUTO_SCALING: 1
    TRYTOND_TZ: Europe/Paris
    COOG_IWC: 1

  persistentVolume:
    enabled: true
    name: workspace-io
    io: /workspace/io/
    storageClass: nfs-client
    size: 10Gi
    claim:
      name: ""

  ingress:
    # -- Default host for the ingress resource for coog containers'
    hosts:
      - paths:
          - /

    annotations:
      nginx.ingress.kubernetes.io/use-proxy-protocol: true
    
    nginx:
      whiteList:
        publicCidr: []

  securityContext: {}
    # runAsUser: ""

  # -- coog containers' resource requests and limits
  resources:
    limits:
      cpu: 1500m
      memory: 1750Mi
    requests:
      cpu: 200m
      memory: 300Mi

  initContainers:
    resources:
      limits:
        cpu: 500m
        memory: 800Mi
      requests:
        cpu: 400m
        memory: 400Mi



celery:
  workers:
    # -- Number of celery workers to run
    number: 1

  # -- Configure environement variables for this component
  config: {}

  # -- celery containers' resource requests and limits
  resources:
    limits:
      cpu: 400m
      memory: 1000Mi
    requests:
      cpu: 100m
      memory: 300Mi



static:
  image:
    # -- static image name
    name: coog-static

  strategy:
    # -- static redeployment strategy type
    type: ""

  ingress:
    # -- Default host for the ingress resource for static containers'
    hosts:
      - paths:
          - /sao
          - /bench
          - /doc
    nginx:
      whiteList:
        publicCidr: []

  securityContext: {}
    # runAsUser: ""

  # -- static containers' resource requests and limits
  resources:
    limits:
      cpu: 50m
      memory: 80Mi
    requests:
      cpu: 10m
      memory: 20Mi



cron:
  # -- Dynamic ConfigMap variables for cron
  config:
    TRYTOND_DEBUG__VIEWS: false

  coogCeleryModule: coog_async.coog_celery

  # -- cron containers' resource requests and limits
  resources:
    limits:
      cpu: 200m
      memory: 500Mi
    requests:
      cpu: 100m
      memory: 300Mi

  # -- Configure options applied to cron deployment, liveness, readiness and startup probes
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
  # initialDelaySeconds: Initial delay seconds e
  # periodSeconds: Period seconds
  # timeoutSeconds: Timeout seconds
  # failureThreshold: Failure threshold
  # successThreshold: Success threshold
  #
  # With this configuration, the kubelet will attempt to open a socket to your container on the specified port. 
  # If it can establish a connection, the container is considered healthy, if it can't it is considered a failure
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 120
    timeoutSeconds: 10
    successThreshold: 1
    failureThreshold: 2

  # -- additional startup time on their first initialization
  startupProbe:
    initialDelaySeconds: 30
    periodSeconds: 120
    timeoutSeconds: 10
    successThreshold: 1
    failureThreshold: 2
  



### Front components :

# -- FrontCore
## If one frontend component is enabled: true, it will enable by default the frontCore components (gateway, api & api-identity-manager)
# List of front components :
# - gateway
# - api
# - apiIdentityManager
# - apiB2c
# - apiReferential
# - b2c
# - b2b
# - customerBackend
# - customerFrontend
# - web
#
# If you enable one front component, you must set mongodb.isManaged: true
frontCore:
  enabled: false
  config:
    JWT_EXPIRATION: 3600



gateway:
  image:
    # -- gateway image repository
    name: coog-gateway

  # -- Configure environement variables for this component
  config:
    COOG_MODULE: true
    GOOGLE_MODULE: false
    FACEBOOK_MODULE: false
    COOG_TOKEN_MODULE: true
    COOG_GATEWAY_PORT: 8000
    COOG_GATEWAY_BASE_PATH: /gateway

  ingress:
    # -- Default host for the ingress resource for gateway containers
    hosts:
      - paths:
          - /gateway(/|$)(.*)
    
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: '/$2'
    
    nginx:
      whiteList:
        publicCidr: []

  securityContext: {}
    # runAsUser: ""

  # -- gateway containers resource requests and limits
  resources:
    limits:
      cpu: 100m
      memory: 100Mi
    requests:
      cpu: 50m
      memory: 50Mi


api:
  image:
    # -- api-v2 image repository
    name: coog-api

  # -- Configure environement variables for this component
  config: {}

  securityContext: {}
    # runAsUser: ""

  # -- api containers resource requests and limits
  resources:
    limits:
      cpu: 500m
      memory: 100Mi
    requests:
      cpu: 50m
      memory: 50Mi



apiIdentityManager:
  image:
    # -- api-identity-manager image repository
    name: coog-api-identity-manager
  
  # -- Configure environement variables for this component
  config: {}

  securityContext: {}
    # runAsUser: ""

  # -- apiIdentityManager containers' resource requests and limits
  resources:
    limits:
      cpu: 50m
      memory: 70Mi
    requests:
      cpu: 10m
      memory: 30Mi


### Front Additional components

##################
# Components B2B #
##################

b2b:
  enabled: false

  image:
    # -- b2b image repository
    name: coog-b2b

  ingress:
    # -- Default host for the ingress resource for gateway containers
    hosts:
      - paths:
          - /portal(/|$)(.*)
    
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: '/$2'
    
    nginx:
      whiteList:
        publicCidr: []

  securityContext: {}
    # runAsUser: ""

  # -- b2b containers' resource requests and limits
  resources:
    limits:
      cpu: 250m
      memory: 50Mi
    requests:
      cpu: 10m
      memory: 25Mi



web:
  enabled: false

  image:
    # -- web image repository
    name: coog-web

  # -- Configure environement variables for this component
  config:
    COOG_API_API_PATH: /web/api
    COOG_API_APP_PATH: /web

  securityContext: {}
    # runAsUser: ""

  # -- web containers' resource requests and limits
  resources:
    limits:
      cpu: 500m
      memory: 200Mi
    requests:
      cpu: 30m
      memory: 30Mi


##################
# Components B2C #
##################

b2c:
  # -- Deploy b2c container(s)
  enabled: true

  image:
    # -- b2c image repository
    name: coog-app-b2c

  ingress:
    # -- Default host for the ingress resource for gateway containers
    hosts:
      - paths:
          - /customers/myspace(/|$)(.*)
    
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: '/$2'
    
    nginx:
      whiteList:
        publicCidr: []

  securityContext: {}
    # runAsUser: ""

  # -- b2c containers' resource requests and limits
  resources:
    limits:
      cpu: 50m
      memory: 50Mi
    requests:
      cpu: 10m
      memory: 30Mi


# -- Is enable if one off following front component is enable :
# - b2c
# - customerBackend
# - customerFrontend
apiB2c:
  image:
    # -- apiB2c image repository
    name: coog-api-b2c

  # -- Configure environement variables for this component
  config: {}

  securityContext: {}
    # runAsUser: ""

  # -- apiB2c containers' resource requests and limits
  resources:
    limits:
      cpu: 50m
      memory: 50Mi
    requests:
      cpu: 20m
      memory: 25Mi

###########################################################



apiReferential:
  # -- Deploy apiReferential container(s)
  enabled: false

  image:
    # -- apiReferential image repository
    name: api-referential

  # -- apiReferential containers' resource requests and limits
  resources:
    limits:
      cpu: 200m
      memory: 400Mi
    requests:
      cpu: 100m
      memory: 250Mi



unoconv:
  # -- Deploy unoconv container(s)
  enabled: false
  # -- 	Number of unoconv Pods to run
  replicaCount: 1

  image:
    # -- unoconv image repository
    name: unoconv
    # -- unoconv image tag
    tag: dgw-0.0.1
    # -- unoconv image pull policy
    pullPolicy: Always

  service:
    type: ClusterIP
    port: 5000

  # -- unoconv containers' resource requests and limits
  resources:
    limits:
      cpu: 300m
      memory: 300Mi
    requests:
      cpu: 50m
      memory: 50Mi

  livenessProbe:
    initialDelaySeconds: 0
    periodSeconds: 60
    timeoutSeconds: 30
    successThreshold: 1
    failureThreshold: 1
  readinessProbe:
    initialDelaySeconds: 0
    periodSeconds: 30
    timeoutSeconds: 30
    successThreshold: 1
    failureThreshold: 3


# B2C Frontend
customerFrontend:
  # -- Deploy b2b container(s)
  enabled: false
  # -- 	Number of b2b Pods to run
  replicaCount: 1

  image:
    # -- b2b image repository
    name: coog-customer-frontend
    # -- b2b image tag
    tag: coog-2.13.2137
    # -- b2b image pull policy
    pullPolicy: Always

  ingress:
    # -- Enable ingress controller resource for b2b containers'
    enabled: true
    # -- Ingress annotations for b2b containers'
    annotations: {}
      # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # -- Default host for the ingress resource for b2b containers'
    hosts:
      - host: customer.local
        paths: []
    # -- TLS configuration for b2b containers'
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # -- b2b containers' resource requests and limits
  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 100m
      memory: 100Mi
    requests:
      cpu: 50m
      memory: 50Mi

  initContainers:
    resources:
      limits:
        cpu: 400m
        memory: 2000Mi
      requests:
        cpu: 200m
        memory: 1500Mi

# B2C Backend
customerBackend:
  # -- Deploy b2b container(s)
  enabled: false
  # -- 	Number of b2b Pods to run
  replicaCount: 1
  postgres_db: 'strapi'

  image:
    # -- b2b image repository
    name: coog-customer-backend
    # -- b2b image tag
    tag: coog-2.13.2137
    # -- b2b image pull policy
    pullPolicy: Always

  ingress:
    # -- Enable ingress controller resource for b2b containers'
    enabled: true
    # -- Ingress annotations for b2b containers'
    annotations: {}
      # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # -- Default host for the ingress resource for b2b containers'
    hosts:
      - host: v1.customer.local
        paths: []
    # -- TLS configuration for b2b containers'
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # -- b2b containers' resource requests and limits
  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 400m
      memory: 300Mi
    requests:
      cpu: 100m
      memory: 150Mi

  initContainers:
    resources:
      limits:
        cpu: 400m
        memory: 500Mi
      requests:
        cpu: 200m
        memory: 250Mi
