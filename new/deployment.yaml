---
# Source: coog/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ccas-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.3
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.9.13"
automountServiceAccountToken: true
secrets:
  - name: ccas-rabbitmq
---
# Source: coog/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ccas-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.1
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "11.14.0"
  namespace: default
type: Opaque
data:
  postgresql-password: "MXpHZUVGVmg3Qw=="
---
# Source: coog/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ccas-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.3
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.9.13"
type: Opaque
data:
  rabbitmq-password: "cjBoeHJUYmExOA=="
  rabbitmq-erlang-cookie: "dVJoRkY4RlFjWHJqTGtQV1FycUxZRFYyT2xvdkFyOTg="
---
# Source: coog/templates/coog/secret-database.yml
apiVersion: v1
kind: Secret
metadata:
  name: ccas-coog-database
  labels:
    app.kubernetes.io/name: coog-coog
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
type: Opaque
stringData:
  db-adminPassword: ""
  db-username: "test"
  db-password: "test"
---
# Source: coog/templates/coog/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ccas-coog-configuration
  labels:
    app.kubernetes.io/name: coog-coog
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
type: Opaque
stringData:
  TRYTOND_DATABASE__URI: "postgresql://test:test@:5432/test"
  TRYTOND_ASYNC__CELERY: "amqp://user:@ccas-rabbitmq:5672"
  TRYTOND_SESSION__PASSPHRASE: "changeme"
  trytond_session__passphrase: "changeme"
---
# Source: coog/charts/rabbitmq/templates/configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ccas-rabbitmq-config
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.3
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.9.13"
data:
  rabbitmq.conf: |-
    ## Username and password
    ##
    default_user = user
    default_pass = CHANGEME
    ## Clustering
    ##
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator = min-masters
    # enable guest user
    loopback_users.guest = false
    consumer_timeout = 172800000
    loopback_users.guest = false
---
# Source: coog/templates/coog/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ccas-coog-configuration
  labels:
    app.kubernetes.io/name: coog-coog
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
data:
  # Database
  COOG_POSTGRES_HOST: 
  COOG_POSTGRES_PORT: 5432
  COOG_DB_NAME: test
  # Tryton
  TRYTOND_REPORT__API: http://ccas-coog-libroconv:5000/unoconv/{oext}
  TRYTOND_CACHE__RECORD: 50000
  TRYTOND_CACHE__CLEAN_TIMEOUT: 0
  COOG_IWC: 1
  COOG_TIMEOUT: 3600
  LOG_LEVEL: INFO
  TRYTOND_BATCH__ENABLE_CELERY_AUTO_SCALING: 1
  TRYTOND_DATABASE__LANGUAGE: fr
  TRYTOND_DEBUG__DISABLE_SYNTAX_ANALYSIS: true
  TRYTOND_EMAIL__FROM: to_define
---
# Source: coog/templates/coog/coog-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ccas-coog-coog-workspace-io
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: "nfs-client"
  resources:
    requests:
      storage: "10Gi"
---
# Source: coog/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ccas-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.3
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.9.13"
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: coog/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ccas-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.3
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.9.13"
subjects:
  - kind: ServiceAccount
    name: ccas-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ccas-rabbitmq-endpoint-reader
---
# Source: coog/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.1
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "11.14.0"
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: ccas
---
# Source: coog/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.1
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "11.14.0"
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: ccas
    role: primary
---
# Source: coog/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-rabbitmq-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.3
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.9.13"
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: ccas
  publishNotReadyAddresses: true
---
# Source: coog/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.3
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.9.13"
spec:
  type: ClusterIP
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: ccas
---
# Source: coog/templates/coog/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-coog-coog
  labels:
    app.kubernetes.io/name: coog-coog
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: coog-coog
    app.kubernetes.io/instance: ccas
---
# Source: coog/templates/coog/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ccas-coog-coog
  labels:
    app.kubernetes.io/name: coog-coog
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: coog-coog
      app.kubernetes.io/instance: ccas
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coog-coog
        helm.sh/chart: coog-22.28.2228
        app.kubernetes.io/instance: ccas
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "master"
    spec:
      imagePullSecrets:
        - name: docker-registry
      volumes:
        - name: ccas-coog-coog-workspace-io
          persistentVolumeClaim:
            claimname: ccas-coog-coog-workspace-io
        - name: ccas-coog-coog-configuration
          configMap:
            name: ccas-coog-coog-configuration
      initContainers:
        - name: coog-module-update
          image: "cooghub/coog:coog-master-latest"
          imagepullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            procMount: Default
            runAsNonRoot: true
            runAsUser: 1000
          resources:
            limits:
              cpu: 500m
              memory: 800Mi
            requests:
              cpu: 400m
              memory: 400Mi
          command: ['sh', '-c', 'ep admin -cu ir res --activate-dependencies']
          env:
            ############ Secrets
            - name:  COOG_DB_USER
              valueFrom:
                secretKeyRef:
                  name: ccas-coog-database
                  key: db-username
            - name:  COOG_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ccas-coog-database
                  key: db-password
            - name:  TRYTOND_ASYNC__CELERY
              valueFrom:
                secretKeyRef:
                  name: ccas-coog-configuration
                  key: TRYTOND_ASYNC__CELERY
            - name:  TRYTOND_ASYNC_CELERY
              valueFrom:
                secretKeyRef:
                  name: ccas-coog-configuration
                  key: TRYTOND_ASYNC__CELERY
            - name:  TRYTOND_DATABASE__URI
              valueFrom:
                secretKeyRef:
                  name: ccas-coog-configuration
                  key: TRYTOND_DATABASE__URI
            - name:  TRYTOND_SESSION__PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: ccas-coog-configuration
                  key: TRYTOND_SESSION__PASSPHRASE
            ############ ConfigMaps
            - name: TRYTOND_REPORT__API
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: TRYTOND_REPORT__API
            - name: COOG_POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: COOG_POSTGRES_HOST
            - name: COOG_POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: COOG_POSTGRES_PORT
            - name: COOG_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: COOG_DB_NAME
            - name: COOG_IWC
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: COOG_IWC
            - name: COOG_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: COOG_TIMEOUT
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: LOG_LEVEL
            - name: TRYTOND_BATCH__ENABLE_CELERY_AUTO_SCALING
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: TRYTOND_BATCH__ENABLE_CELERY_AUTO_SCALING
            - name: TRYTOND_DATABASE__LANGUAGE
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: TRYTOND_DATABASE__LANGUAGE
            - name: TRYTOND_DEBUG__DISABLE_SYNTAX_ANALYSIS
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: TRYTOND_DEBUG__DISABLE_SYNTAX_ANALYSIS
            - name: TRYTOND_EMAIL__FROM
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: TRYTOND_EMAIL__FROM
            - name: trytond_session__passphrase
              valueFrom:
                secretKeyRef:
                  name: ccas-coog-configuration
                  key: trytond_session__passphrase
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
      containers:
        - name: coog-coog
          image: "cooghub/coog:coog-master-latest"
          imagepullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            procMount: Default
            runAsNonRoot: true
            runAsUser: 1000
          command: ['ep', 'server', "1"]
          volumeMounts:
            - name: ccas-coog-coog-workspace-io
              mountPath: /workspace/io
              readOnly: false
          env:
            ############ Secrets
            - name:  COOG_DB_USER
              valueFrom:
                secretKeyRef:
                  name: ccas-coog-database
                  key: db-username
            - name:  COOG_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ccas-coog-database
                  key: db-password
            - name:  TRYTOND_ASYNC__CELERY
              valueFrom:
                secretKeyRef:
                  name: ccas-coog-configuration
                  key: TRYTOND_ASYNC__CELERY
            - name:  TRYTOND_ASYNC_CELERY
              valueFrom:
                secretKeyRef:
                  name: ccas-coog-configuration
                  key: TRYTOND_ASYNC__CELERY
            - name:  TRYTOND_DATABASE__URI
              valueFrom:
                secretKeyRef:
                  name: ccas-coog-configuration
                  key: TRYTOND_DATABASE__URI
            ############ ConfigMaps
            - name: TRYTOND_REPORT__API
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: TRYTOND_REPORT__API
            - name: COOG_POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: COOG_POSTGRES_HOST
            - name: COOG_POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: COOG_POSTGRES_PORT
            - name: COOG_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: COOG_DB_NAME
            - name: COOG_IWC
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: COOG_IWC
            - name: COOG_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: COOG_TIMEOUT
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: LOG_LEVEL
            - name: TRYTOND_BATCH__ENABLE_CELERY_AUTO_SCALING
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: TRYTOND_BATCH__ENABLE_CELERY_AUTO_SCALING
            - name: TRYTOND_DATABASE__LANGUAGE
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: TRYTOND_DATABASE__LANGUAGE
            - name: TRYTOND_DEBUG__DISABLE_SYNTAX_ANALYSIS
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: TRYTOND_DEBUG__DISABLE_SYNTAX_ANALYSIS
            - name: TRYTOND_EMAIL__FROM
              valueFrom:
                configMapKeyRef:
                  name: ccas-coog-configuration
                  key: TRYTOND_EMAIL__FROM
            - name: trytond_session__passphrase
              valueFrom:
                secretKeyRef:
                  name: ccas-coog-configuration
                  key: trytond_session__passphrase
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /liveness
              port: http
            exec:
            periodSeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: "/test/readiness"
              port: http
            exec:
            periodSeconds: 30
            timeoutSeconds: 30
          resources:
            limits:
              cpu: 1500m
              memory: 1750Mi
            requests:
              cpu: 200m
              memory: 300Mi
---
# Source: coog/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ccas-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.1
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "11.14.0"
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: ccas-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: ccas
      role: primary
  template:
    metadata:
      name: ccas-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.15.1
        app.kubernetes.io/instance: ccas
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "11.14.0"
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: ccas
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: ccas-postgresql
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r24
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ccas-postgresql
                  key: postgresql-password
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: coog/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ccas-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.3
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.9.13"
spec:
  serviceName: ccas-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: ccas
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.26.3
        app.kubernetes.io/instance: ccas
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "3.9.13"
      annotations:
        checksum/config: bb8cb47f49aa74e80f9ac14b72fb56062fd44927809ea42ecfe94e02a9a058ec
        checksum/secret: ef71de031f991af5d5c1a3261c76bf9bf186dab90434036b36459771daf494ef
    spec:
      
      serviceAccountName: ccas-rabbitmq
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: rabbitmq
                    app.kubernetes.io/instance: ccas
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      terminationGracePeriodSeconds: 120
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.9.13-debian-10-r2
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "ccas-rabbitmq-headless"
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: ccas-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "no"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "yes"
            - name: RABBITMQ_USERNAME
              value: "user"
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ccas-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
            initialDelaySeconds: 240
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 3
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d  "false"
                    else
                        rabbitmqctl stop_app
                    fi
          resources:
            limits:
              cpu: 600m
              memory: 400Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          configMap:
            name: ccas-rabbitmq-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: rabbitmq
          app.kubernetes.io/instance: ccas
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: coog/templates/coog/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ccas-coog-coog
  labels:
    app.kubernetes.io/name: coog-coog
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
  annotations:
    nginx.ingress.kubernetes.io/whitelist-source-range: "127.0.0.1/32"
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/client-body-buffer-size: "100m"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/send-timeout: "3600"
spec:
  rules:
    - host: "coog.local"
      http:
        paths:
        - path: "/"
          pathType: Prefix
          backend:
            service:
              name: ccas-coog-coog
              port:
                name: http
