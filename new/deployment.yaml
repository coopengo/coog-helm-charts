---
# Source: coog/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ccas-mongodb
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.30.12
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "4.4.11"
secrets:
  - name: ccas-mongodb
---
# Source: coog/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ccas-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.3
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.9.13"
automountServiceAccountToken: true
secrets:
  - name: ccas-rabbitmq
---
# Source: coog/charts/mongodb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ccas-mongodb
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.30.12
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "4.4.11"
    app.kubernetes.io/component: mongodb
type: Opaque
data:
  mongodb-root-password: "YWRtaW4="
  mongodb-passwords: "YWRtaW4="
---
# Source: coog/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ccas-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.1
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "11.14.0"
  namespace: default
type: Opaque
data:
  postgresql-password: "eGs2OVZWNGsyUg=="
---
# Source: coog/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ccas-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.3
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.9.13"
type: Opaque
data:
  rabbitmq-password: "Y2hhbmdlbWU="
  rabbitmq-erlang-cookie: "RHhxSllQN2Z2VWZkWWRyTHRMUmRoY0NLS1JhWFNBWHY="
---
# Source: coog/templates/api-b2c/secrets.yaml
piVersion: v1
kind: Secret
metadata:
  name: ccas-coog-api-b2c-configuration
  labels:
    app.kubernetes.io/name: coog-api-b2c
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
type: Opaque
stringData:
  COOG_DOCUMENT_TOKEN_SECRET: changeme
---
# Source: coog/templates/gateway/secret-mongodb.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ccas-coog-mongodb
  labels:
    app.kubernetes.io/name: coog-gateway
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
type: Opaque
stringData:
  MONGO_USER: "root"
  MONGO_PASSWORD: "admin"
---
# Source: coog/templates/gateway/secrets-frontcore.yaml
piVersion: v1
kind: Secret
metadata:
  name: ccas-coog-gateway-frontCore
  labels:
    app.kubernetes.io/name: coog-gateway
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
type: Opaque
stringData:
  JWT_ENCRYPTION: changeme
  JWT_INTERNAL_ENCRYPTION: changeme
---
# Source: coog/templates/gateway/secrets.yaml
piVersion: v1
kind: Secret
metadata:
  name: ccas-coog-gateway-configuration
  labels:
    app.kubernetes.io/name: coog-gateway
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
type: Opaque
stringData:
  COOG_WEB_TOKEN: changeme
  FORCEDOTCOM_CLIENT_ID: changeme
  FORCEDOTCOM_CLIENT_SECRET: changeme
---
# Source: coog/templates/secret-postgresql.yml
apiVersion: v1
kind: Secret
metadata:
  name: ccas-coog-postgresql
  labels:
    app.kubernetes.io/name: coog
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
type: Opaque
stringData:
  COOG_DB_USER: "coog"
  COOG_DB_PASSWORD: "changeme"
---
# Source: coog/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ccas-coog-configuration
  labels:
    app.kubernetes.io/name: coog
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
type: Opaque
stringData:
  TRYTOND_DATABASE__URI: "postgresql://coog:changeme@ccas-postgresql:5432/ccas"
  TRYTOND_ASYNC__CELERY: "amqp://coog:changeme@ccas-rabbitmq:5672"
  TRYTOND_ASYNC_CELERY: "amqp://coog:changeme@ccas-rabbitmq:5672" # duplicate of TRYTOND_ASYNC__CELERY
  COOG_DOCUMENT_TOKEN_SECRET: "changeme"
  TRYTOND_SESSION__PASSPHRASE: "changeme"
---
# Source: coog/templates/web/secret-mongodb.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ccas-coog-mongodb
  labels:
    app.kubernetes.io/name: coog-web
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
type: Opaque
stringData:
  COOG_API_MONGO_USER: "root"
  COOG_API_MONGO_PASSWORD: "admin"
---
# Source: coog/charts/rabbitmq/templates/configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ccas-rabbitmq-config
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.3
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.9.13"
data:
  rabbitmq.conf: |-
    ## Username and password
    ##
    default_user = coog
    default_pass = CHANGEME
    ## Clustering
    ##
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator = min-masters
    # enable guest user
    loopback_users.guest = false
    consumer_timeout = 172800000
    loopback_users.guest = false
---
# Source: coog/templates/api-b2c/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ccas-coog-api-b2c-configuration
  labels:
    app.kubernetes.io/name: coog-api-b2c
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
data:
---
# Source: coog/templates/api-identity-manager/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ccas-coog-api-identity-manager-configuration
  labels:
    app.kubernetes.io/name: coog-api-identity-manager
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
data:
---
# Source: coog/templates/api/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ccas-coog-api-configuration
  labels:
    app.kubernetes.io/name: coog-api
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
data:
  COOG_API_V1_URL: http://ccas-coog-web
---
# Source: coog/templates/celery/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ccas-coog-celery-configuration
  labels:
    app.kubernetes.io/name: coog-celery
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
data:
  CELERY_MAX_MEMORY_PER_CHILD: 512000
---
# Source: coog/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ccas-coog-configuration
  labels:
    app.kubernetes.io/name: coog
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
data:
  # Database
  COOG_POSTGRES_HOST: ccas-postgresql
  COOG_POSTGRES_PORT: 5432
  COOG_DB_NAME: ccas
  DB_NAME: ccas # duplicate of COOG_DB_NAME
  # Tryton
  TRYTOND_REPORT__API: http://ccas-coog-libroconv:5000/unoconv/{oext}
  TRYTOND_CACHE__RECORD: 50000
  TRYTOND_CACHE__CLEAN_TIMEOUT: 0
  COOG_IWC: 1
  COOG_TIMEOUT: 3600
  LOG_LEVEL: INFO
  TRYTOND_BATCH__ENABLE_CELERY_AUTO_SCALING: 1
  TRYTOND_DATABASE__LANGUAGE: fr
  TRYTOND_DEBUG__DISABLE_SYNTAX_ANALYSIS: true
  TRYTOND_EMAIL__FROM: to_define
  TRYTOND_TZ: Europe/Paris
---
# Source: coog/templates/cron/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ccas-coog-cron-configuration
  labels:
    app.kubernetes.io/name: coog-cron
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
data:
  COOG_CELERY_WORKERS: 1
  COOG_SERVER_WORKERS: 1
  TRYTOND_DEBUG__VIEWS: false
---
# Source: coog/templates/gateway/configmap-frontcore.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ccas-coog-gateway-frontCore
  labels:
    app.kubernetes.io/name: coog-gateway
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
data:
  # Databases
  MONGO_HOST: ccas-mongodb
  MONGO_PORT: 27017
  MONGO_DB_NAME: api-core-services
  COOG_DB_NAME: ccas
  COOG_URL: http://ccas-coog
  JWT_EXPIRATION: 3600
---
# Source: coog/templates/gateway/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ccas-coog-gateway-configuration
  labels:
    app.kubernetes.io/name: coog-gateway
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
data:
  # URLs
  PORTAL_URL: http://coog.local
  COOG_GATEWAY_URL: http://coog.local
  COOG_API_URL: http://ccas-coog-web
  COOG_API_URL_V2: http://ccas-coog-api
  COOG_API_B2B_CONFIG_URL: http://ccas-coog-api-b2b-config # ajouter un if pour le composant
  COOG_API_B2C_URL: http://ccas-coog-api-b2c # ajouter un if pour le composant
  COOG_API_REFERENTIAL_URL: http://ccas-coog-api-referential # ajouter un if pour le composant
  COOG_API_IDENTITY_MANAGER_URL: http://ccas-coog-api-identity-manager
  COOG_GATEWAY_BASE_PATH: /gateway
  COOG_GATEWAY_PORT: 8000
  COOG_MODULE: true
  COOG_TOKEN_MODULE: true
  FACEBOOK_MODULE: false
  GOOGLE_MODULE: false
---
# Source: coog/charts/mongodb/templates/standalone/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: ccas-mongodb-standalone
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb-standalone
    helm.sh/chart: mongodb-10.30.12
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "4.4.11"
    app.kubernetes.io/component: mongodb
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: coog/templates/coog-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ccas-workspace-io
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: "nfs-client"
  resources:
    requests:
      storage: "10Gi"
---
# Source: coog/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ccas-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.3
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.9.13"
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: coog/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ccas-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.3
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.9.13"
subjects:
  - kind: ServiceAccount
    name: ccas-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ccas-rabbitmq-endpoint-reader
---
# Source: coog/charts/mongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-mongodb-standalone
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb-standalone
    helm.sh/chart: mongodb-10.30.12
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "4.4.11"
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  ports:
    - name: mongodb
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/name: mongodb-standalone
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/component: mongodb
---
# Source: coog/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.1
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "11.14.0"
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: ccas
---
# Source: coog/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.1
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "11.14.0"
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: ccas
    role: primary
---
# Source: coog/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-rabbitmq-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.3
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.9.13"
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: ccas
  publishNotReadyAddresses: true
---
# Source: coog/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.3
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.9.13"
spec:
  type: ClusterIP
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: ccas
---
# Source: coog/templates/api-b2c/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-coog-api-b2c
  labels:
    app.kubernetes.io/name: coog-api-b2c
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: coog-api-b2c
    app.kubernetes.io/instance: ccas
---
# Source: coog/templates/api-identity-manager/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-coog-api-identity-manager
  labels:
    app.kubernetes.io/name: coog-api-identity-manager
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: coog-api-identity-manager
    app.kubernetes.io/instance: ccas
---
# Source: coog/templates/api/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-coog-api
  labels:
    app.kubernetes.io/name: coog-api
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: coog-api
    app.kubernetes.io/instance: ccas
---
# Source: coog/templates/b2c/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-coog-b2c
  labels:
    app.kubernetes.io/name: coog-b2c
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: coog-b2c
    app.kubernetes.io/instance: ccas
---
# Source: coog/templates/celery/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-coog-celery
  labels:
    app.kubernetes.io/name: coog-celery
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: coog-celery
    app.kubernetes.io/instance: ccas
---
# Source: coog/templates/cron/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-coog-cron
  labels:
    app.kubernetes.io/name: coog-cron
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: coog-cron
    app.kubernetes.io/instance: ccas
---
# Source: coog/templates/gateway/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-coog-gateway
  labels:
    app.kubernetes.io/name: coog-gateway
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: coog-gateway
    app.kubernetes.io/instance: ccas
---
# Source: coog/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-coog
  labels:
    app.kubernetes.io/name: coog
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: coog
    app.kubernetes.io/instance: ccas
---
# Source: coog/templates/static/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ccas-coog-static
  labels:
    app.kubernetes.io/name: coog-static
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: coog-static
    app.kubernetes.io/instance: ccas
---
# Source: coog/charts/mongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ccas-mongodb-standalone
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb-standalone
    helm.sh/chart: mongodb-10.30.12
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "4.4.11"
    app.kubernetes.io/component: mongodb
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb-standalone
      app.kubernetes.io/instance: ccas
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb-standalone
        helm.sh/chart: mongodb-10.30.12
        app.kubernetes.io/instance: ccas
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "4.4.11"
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: ccas-mongodb-standalone
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb-standalone
                    app.kubernetes.io/instance: ccas
                    app.kubernetes.io/component: mongodb
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      initContainers:
        - name: volume-permissions
          image: docker.io/bitnami/bitnami-shell:10-debian-10-r299
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -ec
          args:
            - |
              mkdir -p /bitnami/mongodb
              chown -R "1001:1001" "/bitnami/mongodb"
          securityContext:
            runAsUser: 0
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 50m
              memory: 150Mi
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:4.4.11-debian-10-r5
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MONGODB_EXTRA_USERNAMES
              value: "root"
            - name: MONGODB_EXTRA_DATABASES
              value: "api-core-services"
            - name: MONGODB_EXTRA_PASSWORDS
              valueFrom:
                secretKeyRef:
                  name: ccas-mongodb-standalone
                  key: mongodb-passwords
            - name: MONGODB_ROOT_USER
              value: "root"
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ccas-mongodb-standalone
                  key: mongodb-root-password
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            exec:
              command:
                - mongo
                - --disableImplicitSessions
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - |
                  # Run the proper check depending on the version
                  [[ $(mongo --version | grep "MongoDB shell") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
                  . /opt/bitnami/scripts/libversion.sh
                  VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
                  VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
                  VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
                  if [[ "$VERSION_MAJOR" -ge 4 ]] && [[ "$VERSION_MINOR" -ge 4 ]] && [[ "$VERSION_PATCH" -ge 2 ]]; then
                      mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
                  else
                      mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'
                  fi
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 50m
              memory: 150Mi
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
      volumes:
        - name: datadir
          persistentVolumeClaim:
            claimName: ccas-mongodb-standalone
---
# Source: coog/templates/api-b2c/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ccas-coog-api-b2c
  labels:
    app.kubernetes.io/name: coog-api-b2c
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: coog-api-b2c
      app.kubernetes.io/instance: ccas
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coog-api-b2c
        helm.sh/chart: coog-22.28.2228
        app.kubernetes.io/instance: ccas
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "master"
    spec:
      imagePullSecrets:
        - name: docker-registry
      containers:
        - name: coog-api-b2c
          image: "cooghub/coog-api-b2c:coog-master-latest"
          imagepullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            procMount: Default
            runAsNonRoot: true
            runAsUser: 1000
          envFrom:
            - configMapRef:
                name: ccas-coog-api-b2c-configuration
            - configMapRef:
                name: ccas-coog-gateway-frontCore
            - secretRef:
                name: ccas-coog-gateway-frontCore
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          startupProbe:
            failureThreshold: 30
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          resources:
            limits:
              cpu: 50m
              memory: 50Mi
            requests:
              cpu: 20m
              memory: 25Mi
---
# Source: coog/templates/api-identity-manager/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ccas-coog-api-identity-manager
  labels:
    app.kubernetes.io/name: coog-api-identity-manager
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: coog-api-identity-manager
      app.kubernetes.io/instance: ccas
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coog-api-identity-manager
        helm.sh/chart: coog-22.28.2228
        app.kubernetes.io/instance: ccas
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "master"
    spec:
      imagePullSecrets:
        - name: docker-registry
      containers:
        - name: coog-api-identity-manager
          image: "cooghub/coog-api-identity-manager:coog-master-latest"
          imagepullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            procMount: Default
            runAsNonRoot: true
            runAsUser: 1000
          envFrom:
            - configMapRef:
                name: ccas-coog-api-identity-manager-configuration
            - configMapRef:
                name: ccas-coog-gateway-frontCore
            - secretRef:
                name: ccas-coog-mongodb
            - secretRef:
                name: ccas-coog-gateway-frontCore
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          startupProbe:
            failureThreshold: 30
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          resources:
            limits:
              cpu: 50m
              memory: 70Mi
            requests:
              cpu: 10m
              memory: 30Mi
---
# Source: coog/templates/api/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ccas-coog-api
  labels:
    app.kubernetes.io/name: coog-api
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: coog-api
      app.kubernetes.io/instance: ccas
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coog-api
        helm.sh/chart: coog-22.28.2228
        app.kubernetes.io/instance: ccas
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "master"
    spec:
      imagePullSecrets:
        - name: docker-registry
      containers:
        - name: coog-api
          image: "cooghub/coog-api:coog-master-latest"
          imagepullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            procMount: Default
            runAsNonRoot: true
            runAsUser: 1000
          envFrom:
            - configMapRef:
                name: ccas-coog-api-configuration
            - configMapRef:
                name: ccas-coog-gateway-frontCore
            - secretRef:
                name: ccas-coog-mongodb
            - secretRef:
                name: ccas-coog-gateway-frontCore
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          startupProbe:
            failureThreshold: 30
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          resources:
            limits:
              cpu: 500m
              memory: 100Mi
            requests:
              cpu: 50m
              memory: 50Mi
---
# Source: coog/templates/b2c/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ccas-coog-b2c
  labels:
    app.kubernetes.io/name: coog-b2c
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: coog-b2c
      app.kubernetes.io/instance: ccas
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coog-b2c
        helm.sh/chart: coog-22.28.2228
        app.kubernetes.io/instance: ccas
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "master"
    spec:
      imagePullSecrets:
        - name: docker-registry
      containers:
        - name: coog-b2c
          image: "cooghub/coog-app-b2c:coog-master-latest"
          imagepullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            procMount: Default
            runAsNonRoot: true
            runAsUser: 1000
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          startupProbe:
            failureThreshold: 30
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          resources:
            limits:
              cpu: 50m
              memory: 50Mi
            requests:
              cpu: 10m
              memory: 30Mi
---
# Source: coog/templates/celery/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ccas-coog-celery
  labels:
    app.kubernetes.io/name: coog-celery
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: coog-celery
      app.kubernetes.io/instance: ccas
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coog-celery
        helm.sh/chart: coog-22.28.2228
        app.kubernetes.io/instance: ccas
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "master"
    spec:
      imagePullSecrets:
        - name: docker-registry
      volumes:
        - name: ccas-workspace-io
          persistentVolumeClaim:
            claimname: ccas-workspace-io
      containers:
        - name: coog-celery
          image: "cooghub/coog:coog-master-latest"
          imagepullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            procMount: Default
            runAsNonRoot: true
            runAsUser: 1000
          command: ['ep', 'celery', '1']
          volumeMounts:
            - name: ccas-workspace-io
              mountPath: /workspace/io
              readOnly: false
          envFrom:
            - configMapRef:
                name: ccas-coog-configuration
            - configMapRef:
                name: ccas-coog-celery-configuration
            - secretRef:
                name: ccas-coog-configuration
            - secretRef:
                name: ccas-coog-postgresql
          ports:
            - name: http
              containerPort: 8000
          startupProbe:
            failureThreshold: 30
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /liveness
              port: http
            exec:
              command: ['/bin/bash', '-c', 'celery -A coog_async.coog_celery inspect ping -d celery@$HOSTNAME']
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: "//readiness"
              port: http
            exec:
              command: ['/bin/bash', '-c', 'celery -A coog_async.coog_celery inspect ping -d celery@$HOSTNAME']
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          resources:
            limits:
              cpu: 400m
              memory: 1000Mi
            requests:
              cpu: 100m
              memory: 300Mi
---
# Source: coog/templates/cron/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ccas-coog-cron
  labels:
    app.kubernetes.io/name: coog-cron
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: coog-cron
      app.kubernetes.io/instance: ccas
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coog-cron
        helm.sh/chart: coog-22.28.2228
        app.kubernetes.io/instance: ccas
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "master"
    spec:
      imagePullSecrets:
        - name: docker-registry
      volumes:
        - name: ccas-workspace-io
          persistentVolumeClaim:
            claimname: ccas-workspace-io
      containers:
        - name: coog-cron
          image: "cooghub/coog:coog-master-latest"
          imagepullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            procMount: Default
            runAsNonRoot: true
            runAsUser: 1000
          command: ['ep', 'cron']
          volumeMounts:
            - name: ccas-workspace-io
              mountPath: /workspace/io
              readOnly: false
          envFrom:
            - configMapRef:
                name: ccas-coog-configuration
            - configMapRef:
                name: ccas-coog-cron-configuration
            - secretRef:
                name: ccas-coog-configuration
            - secretRef:
                name: ccas-coog-postgresql
          ports:
            - name: http
              containerPort: 8000
          startupProbe:
            exec:
              command: ['/bin/bash', '-c', 'ep cron --check']
            failureThreshold: 2
            initialDelaySeconds: 30
            periodSeconds: 120
            successThreshold: 1
            timeoutSeconds: 10
          livenessProbe:
            exec:
              command: ['/bin/bash', '-c', 'ep cron --check']
            failureThreshold: 2
            initialDelaySeconds: 30
            periodSeconds: 120
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              cpu: 200m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 300Mi
---
# Source: coog/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ccas-coog
  labels:
    app.kubernetes.io/name: coog
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: coog
      app.kubernetes.io/instance: ccas
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coog
        helm.sh/chart: coog-22.28.2228
        app.kubernetes.io/instance: ccas
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "master"
    spec:
      imagePullSecrets:
        - name: docker-registry
      volumes:
        - name: ccas-workspace-io
          persistentVolumeClaim:
            claimname: ccas-workspace-io
      initContainers:
        - name: coog-module-update
          image: "cooghub/coog:coog-master-latest"
          imagepullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            procMount: Default
            runAsNonRoot: true
            runAsUser: 1000
          command: ['sh', '-c', 'ep admin -cu ir res --activate-dependencies']
          envFrom:
            - configMapRef:
                name: ccas-coog-configuration
            - secretRef:
                name: ccas-coog-configuration
            - secretRef:
                name: ccas-coog-postgresql
          ports:
            - name: http
              containerPort: 8000
          resources:
            limits:
              cpu: 500m
              memory: 800Mi
            requests:
              cpu: 400m
              memory: 400Mi
      containers:
        - name: coog
          image: "cooghub/coog:coog-master-latest"
          imagepullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            procMount: Default
            runAsNonRoot: true
            runAsUser: 1000
          command: ['ep', 'server', '1']
          volumeMounts:
            - name: ccas-workspace-io
              mountPath: /workspace/io
              readOnly: false
          envFrom:
            - configMapRef:
                name: ccas-coog-configuration
            - secretRef:
                name: ccas-coog-configuration
            - secretRef:
                name: ccas-coog-postgresql
          ports:
            - name: http
              containerPort: 8000
          startupProbe:
            failureThreshold: 30
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /liveness
              port: http
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: "//readiness"
              port: http
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          resources:
            limits:
              cpu: 1500m
              memory: 1750Mi
            requests:
              cpu: 200m
              memory: 300Mi
---
# Source: coog/templates/gateway/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ccas-coog-gateway
  labels:
    app.kubernetes.io/name: coog-gateway
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: coog-gateway
      app.kubernetes.io/instance: ccas
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coog-gateway
        helm.sh/chart: coog-22.28.2228
        app.kubernetes.io/instance: ccas
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "master"
    spec:
      imagePullSecrets:
        - name: docker-registry
      containers:
        - name: coog-gateway
          image: "cooghub/coog-gateway:coog-master-latest"
          imagepullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            procMount: Default
            runAsNonRoot: true
            runAsUser: 1000
          envFrom:
            - configMapRef:
                name: ccas-coog-gateway-configuration
            - configMapRef:
                name: ccas-coog-gateway-frontCore
            - secretRef:
                name: ccas-coog-gateway-configuration
            - secretRef:
                name: ccas-coog-mongodb
            - secretRef:
                name: ccas-coog-gateway-frontCore
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          startupProbe:
            failureThreshold: 30
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          resources:
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 50m
              memory: 50Mi
---
# Source: coog/templates/static/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ccas-coog-static
  labels:
    app.kubernetes.io/name: coog-static
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: coog-static
      app.kubernetes.io/instance: ccas
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coog-static
        helm.sh/chart: coog-22.28.2228
        app.kubernetes.io/instance: ccas
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "master"
    spec:
      imagePullSecrets:
        - name: docker-registry
      containers:
        - name: coog-static
          image: "cooghub/coog-static:coog-master-latest"
          imagepullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            procMount: Default
            runAsNonRoot: true
            runAsUser: 1000
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          startupProbe:
            failureThreshold: 30
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /doc
              port: http
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /doc
              port: http
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          resources:
            limits:
              cpu: 50m
              memory: 80Mi
            requests:
              cpu: 10m
              memory: 20Mi
---
# Source: coog/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ccas-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.1
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "11.14.0"
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: ccas-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: ccas
      role: primary
  template:
    metadata:
      name: ccas-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.15.1
        app.kubernetes.io/instance: ccas
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "11.14.0"
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: ccas
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: ccas-postgresql
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r24
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ccas-postgresql
                  key: postgresql-password
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: coog/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ccas-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.3
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.9.13"
spec:
  serviceName: ccas-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: ccas
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.26.3
        app.kubernetes.io/instance: ccas
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "3.9.13"
      annotations:
        checksum/config: 5ea800d51a276263166d2827cfcbdd6e4e1361167addc9d4c6345b66675217e4
        checksum/secret: 78f6646344247292dbf6ce8d4bea9c0cf4ec41541763f4a693cf1d7638a0f23a
    spec:
      
      serviceAccountName: ccas-rabbitmq
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: rabbitmq
                    app.kubernetes.io/instance: ccas
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      terminationGracePeriodSeconds: 120
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.9.13-debian-10-r2
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "ccas-rabbitmq-headless"
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: ccas-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "no"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "yes"
            - name: RABBITMQ_USERNAME
              value: "coog"
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ccas-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
            initialDelaySeconds: 240
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 3
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d  "false"
                    else
                        rabbitmqctl stop_app
                    fi
          resources:
            limits:
              cpu: 600m
              memory: 400Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          configMap:
            name: ccas-rabbitmq-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: rabbitmq
          app.kubernetes.io/instance: ccas
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: coog/templates/b2c/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ccas-coog-b2c
  labels:
    app.kubernetes.io/name: coog-b2c
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/whitelist-source-range: "127.0.0.1/32"
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/client-body-buffer-size: "100m"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/send-timeout: "3600"
    nginx.ingress.kubernetes.io/rewrite-target: "/$2"
spec:
  tls:
    - hosts:
        - "coog.local"
      secretName: coog.local-tls
  rules:
    - host: "coog.local"
      http:
        paths:
        - path: "/customers/myspace(/|$)(.*)"
          pathType: Prefix
          backend:
            service:
              name: ccas-coog-b2c
              port:
                name: http
---
# Source: coog/templates/gateway/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ccas-coog-gateway
  labels:
    app.kubernetes.io/name: coog-gateway
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/whitelist-source-range: "127.0.0.1/32"
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/client-body-buffer-size: "100m"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/send-timeout: "3600"
    nginx.ingress.kubernetes.io/rewrite-target: "/$2"
spec:
  tls:
    - hosts:
        - "coog.local"
      secretName: coog.local-tls
  rules:
    - host: "coog.local"
      http:
        paths:
        - path: "/gateway(/|$)(.*)"
          pathType: Prefix
          backend:
            service:
              name: ccas-coog-gateway
              port:
                name: http
---
# Source: coog/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ccas-coog
  labels:
    app.kubernetes.io/name: coog
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/whitelist-source-range: "127.0.0.1/32"
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/client-body-buffer-size: "100m"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/send-timeout: "3600"
    nginx.ingress.kubernetes.io/use-proxy-protocol: "true"
spec:
  tls:
    - hosts:
        - "coog.local"
      secretName: coog.local-tls
  rules:
    - host: "coog.local"
      http:
        paths:
        - path: "/"
          pathType: Prefix
          backend:
            service:
              name: ccas-coog
              port:
                name: http
---
# Source: coog/templates/static/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ccas-coog-static
  labels:
    app.kubernetes.io/name: coog-static
    helm.sh/chart: coog-22.28.2228
    app.kubernetes.io/instance: ccas
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "master"
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/whitelist-source-range: "127.0.0.1/32"
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/client-body-buffer-size: "100m"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/send-timeout: "3600"
spec:
  tls:
    - hosts:
        - "coog.local"
      secretName: coog.local-tls
  rules:
    - host: "coog.local"
      http:
        paths:
        - path: "/sao"
          pathType: Prefix
          backend:
            service:
              name: ccas-coog-static
              port:
                name: http
        - path: "/bench"
          pathType: Prefix
          backend:
            service:
              name: ccas-coog-static
              port:
                name: http
        - path: "/doc"
          pathType: Prefix
          backend:
            service:
              name: ccas-coog-static
              port:
                name: http
