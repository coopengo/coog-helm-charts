apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ printf "%s" (include "general.names.short" .) }}
  labels: {{- include "general.labels.standard" . | nindent 4 }}
spec:
  replicas: {{ default .Values.replicaCount .Values.backCore.coog.replicaCount }}
  strategy:
    type: {{ default .Values.strategy.type .Values.backCore.strategy.type }}
  selector:
    matchLabels: {{- include "general.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{- include "general.labels.standard" . | nindent 8 }}
      annotations:
        {{- if .Values.extraEnvVar }}
        checksum/configmap-global: {{ include (printf "%s/%s" $.Template.BasePath "configmap-global.yaml") . | sha256sum  }}
        {{- end }}
        checksum/configmap-backcore: {{ include (printf "%s/%s" $.Template.BasePath "configmap-backcore.yaml") . | sha256sum  }}
        checksum/configmap: {{ include (printf "%s/%s/%s" $.Template.BasePath (base (dir .Template.Name)) "configmap.yaml") . | sha256sum }}
        checksum/secret-global: {{ include (printf "%s/%s" $.Template.BasePath "secret-global.yaml") . | sha256sum  }}
        checksum/secret-backcore: {{ include (printf "%s/%s" $.Template.BasePath "secret-backcore.yaml") . | sha256sum  }}
        {{- if (and .Values.secrets .Values.secrets.backCore .Values.secrets.backCore.coog .Values.secrets.backCore.coog.extraEnvVar) }}
        checksum/secret: {{ include (printf "%s/%s/%s" $.Template.BasePath (base (dir .Template.Name)) "secret.yaml") . | sha256sum }}
        {{- end }}
        checksum/secret-postgresql: {{ include (printf "%s/%s" $.Template.BasePath "secret-postgresql.yaml") . | sha256sum  }}
    spec:
      imagePullSecrets:
        - name: {{ (default "docker-registry" (and .Values.imageCredentials .Values.imageCredentials.name)) }}
    {{- if .Values.backCore.persistentVolume.enabled }}
      volumes:
        - name: {{ printf "%s-%s" .Release.Name .Values.backCore.persistentVolume.name | trunc 63 | trimSuffix "-" }}
          persistentVolumeClaim:
            claimName: {{ default (printf "%s-%s" .Release.Name .Values.backCore.persistentVolume.name | trunc 63 | trimSuffix "-") .Values.backCore.persistentVolume.existingClaim }}
      {{- end }}
      initContainers:
        - name: {{ printf "%s-module-update" (include "general.names.short" .) }}
          image: "{{ default .Values.image.repository .Values.backCore.image.repository }}/{{ .Values.backCore.image.name }}:{{ default .Values.image.tag .Values.backCore.image.tag }}"
          imagePullPolicy: {{ default .Values.image.pullPolicy .Values.backCore.image.pullPolicy | quote }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            procMount: Default
            runAsNonRoot: true
            runAsUser: {{ default .Values.securityContext.runAsUser .Values.backCore.coog.securityContext.runAsUser }}
          command: ['sh', '-c', 'ep admin -cu ir res --activate-dependencies']
          envFrom:
            {{- if .Values.extraEnvVar }}
            - configMapRef:
                name: {{ printf "%s-global-configuration" (include "general.names.short" .) }}
            {{- end }}
            - configMapRef:
                name: {{ printf "%s-backcore-configuration" (include "general.names.short" .) }}
            - configMapRef:
                name: {{ printf "%s-configuration" (include "general.names.short" .) }}
            - secretRef:
                name: {{ printf "%s-global-configuration" (include "general.names.short" .) }}
            - secretRef:
                name: {{ printf "%s-backcore-configuration" (include "general.names.short" .) }}
            {{- if (and .Values.secrets .Values.secrets.backCore .Values.secrets.backCore.coog .Values.secrets.backCore.coog.extraEnvVar) }}
            - secretRef:
                name: {{ printf "%s-configuration" (include "general.names.short" .) }}
            {{- end }}
            - secretRef:
                name: {{  printf "%s-postgresql" (include "general.names.short" .) }}
          ports:
            - name: http
              containerPort: 8000
          resources: {{- toYaml .Values.backCore.coog.initContainers.resources | nindent 12 }}
      containers:
        - name: {{ printf "%s" (include "general.names.short" .) }}
          image: "{{ default .Values.image.repository .Values.backCore.image.repository }}/{{ .Values.backCore.image.name }}:{{ default .Values.image.tag .Values.backCore.image.tag }}"
          imagePullPolicy: {{ default .Values.image.pullPolicy .Values.backCore.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            procMount: Default
            runAsNonRoot: true
            runAsUser: {{ default .Values.securityContext.runAsUser .Values.backCore.coog.securityContext.runAsUser }}
          command: ['ep', 'server', '{{ default .Values.backCore.workers.number .Values.backCore.coog.workers.number }}']
          {{- if or .Values.backCore.persistentVolume.enabled .Values.backCore.coog.configurationFiles }}
          volumeMounts:
            {{- if .Values.backCore.persistentVolume.enabled }}
            - name: {{ printf "%s-%s" .Release.Name .Values.backCore.persistentVolume.name | trunc 63 | trimSuffix "-" }}
              mountPath: /workspace/io
              readOnly: false
            {{- end }}
          {{- end }}
          {{- if or .Values.customerBackend.enabled .Values.customerFrontend.enabled }}
          env:
            - name:  TRYTOND_B2C_API__SHARED_SECRET
              valueFrom:
                  secretKeyRef:
                    name: {{ printf "%s-customer-backend-configuration" (include "general.names.short" .) }}
                    key: COOG_TOKEN_SHARED_SECRET
          {{- end }}
          envFrom:
            {{- if .Values.extraEnvVar }}
            - configMapRef:
                name: {{ printf "%s-global-configuration" (include "general.names.short" .) }}
            {{- end }}
            - configMapRef:
                name: {{ printf "%s-backcore-configuration" (include "general.names.short" .) }}
            - configMapRef:
                name: {{ printf "%s-configuration" (include "general.names.short" .) }}
            - secretRef:
                name: {{ printf "%s-global-configuration" (include "general.names.short" .) }}
            - secretRef:
                name: {{ printf "%s-backcore-configuration" (include "general.names.short" .) }}
            {{- if (and .Values.secrets .Values.secrets.backCore .Values.secrets.backCore.coog .Values.secrets.backCore.coog.extraEnvVar) }}
            - secretRef:
                name: {{ printf "%s-configuration" (include "general.names.short" .) }}
            {{- end }}
            - secretRef:
                name: {{  printf "%s-postgresql" (include "general.names.short" .) }}
          ports:
            - name: http
              containerPort: 8000
          startupProbe:
            httpGet:
              path: /liveness
              port: http
            {{- include "general.tplvalues.render" (dict "value" (default .Values.startupProbe .Values.backCore.coog.startupProbe) "context" $) | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /liveness
              port: http
            {{- include "general.tplvalues.render" (dict "value" (default .Values.livenessProbe .Values.backCore.coog.livenessProbe) "context" $) | nindent 12 }}
          readinessProbe:
            httpGet:
              path: "/{{ .Values.postgresql.auth.database }}/readiness"
              port: http
            {{- include "general.tplvalues.render" (dict "value" (default .Values.readinessProbe .Values.backCore.coog.readinessProbe) "context" $) | nindent 12 }}
          resources: {{- toYaml .Values.backCore.coog.resources | nindent 12 }}
      {{- with default .Values.nodeSelector .Values.backCore.coog.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with default .Values.affinity .Values.backCore.coog.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with default .Values.tolerations .Values.backCore.coog.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if default .Values.dnsPolicy .Values.backCore.coog.dnsPolicy }}
      dnsPolicy: {{ default .Values.dnsPolicy .Values.backCore.coog.dnsPolicy }}
      {{- end }}
      {{- if default .Values.dnsConfig .Values.backCore.coog.dnsConfig }}
      dnsConfig: {{- toYaml default .Values.dnsConfig .Values.backCore.coog.dnsConfig | indent 8 }}
      {{- end }}