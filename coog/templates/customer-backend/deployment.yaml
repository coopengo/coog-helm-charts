{{- if .Values.customerBackend.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
spec:
  replicas: {{ default .Values.replicaCount .Values.customerBackend.replicaCount }}
{{- if not .Values.quota.rolling_update }}
  strategy:
    type: Recreate
{{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
    spec:
    {{- with .Values.customerBackend.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
        - name: builddir
          emptyDir: {}
      initContainers:
        - name: "{{ .Chart.Name }}-build"
          image: "{{ .Values.customerBackend.image.repository }}:{{ default .Values.image.tag .Values.customerBackend.image.tag }}"
          imagepullPolicy: {{ default .Values.image.pullPolicy .Values.customerBackend.image.pullPolicy | quote }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            procMount: Default
            runAsNonRoot: true
            runAsUser: {{ default .Values.securityContext.runAsUser .Values.customerBackend.securityContext.runAsUser }}
          resources:
            {{- toYaml .Values.customerBackend.initContainers.resources | nindent 12 }}
          command: ['sh', '-c', 'yarn', 'build', '--no-optimization']
          volumeMounts:
            - name: builddir
              mountPath: "/workdir/build"
          env:
            - name:  DATABASE_HOST
            {{- if not .Values.coog.external_postgres.enabled }}
              value: "{{ .Release.Name }}-postgresql"
            {{ else }}
              value: "{{ .Values.coog.external_postgres.host }}"
            {{- end }}
            - name:  DATABASE_PORT
            {{- if not .Values.coog.external_postgres.enabled }}
              value: "{{ .Values.postgresql.service.port }}"
            {{ else }}
              value: "{{ .Values.coog.external_postgres.port }}"
            {{- end }}
            - name:  DATABASE_NAME
              value: "{{ .Values.customerBackend.postgres_db }}"
            - name:  DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: coog-postgres-db-secret
                  key: USER
            - name:  DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: coog-postgres-db-secret
                  key: PASSWORD
            {{- if .Values.customerBackend.extraEnv }}
            {{- range $key, $value := .Values.customerBackend.extraEnv }}
            - name:  {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
      containers:
        - name: {{ include "common.names.name" . }}
          image: "{{ .Values.customerBackend.image.repository }}:{{ default .Values.image.tag .Values.customerBackend.image.tag }}"
          imagepullPolicy: {{ default .Values.image.pullPolicy .Values.customerBackend.image.pullPolicy | quote }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            procMount: Default
            runAsNonRoot: true
            runAsUser: {{ default .Values.securityContext.runAsUser .Values.customerBackend.securityContext.runAsUser }}
          volumeMounts:
            - name: builddir
              mountPath: "/workdir/build"
          env:
            - name:  DATABASE_HOST
            {{- if not .Values.coog.external_postgres.enabled }}
              value: "{{ .Release.Name }}-postgresql"
            {{ else }}
              value: "{{ .Values.coog.external_postgres.host }}"
            {{- end }}
            - name:  DATABASE_PORT
            {{- if not .Values.coog.external_postgres.enabled }}
              value: "{{ .Values.postgresql.service.port }}"
            {{ else }}
              value: "{{ .Values.coog.external_postgres.port }}"
            {{- end }}
            - name:  DATABASE_NAME
              value: "{{ .Values.customerBackend.postgres_db }}"
            - name:  DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: coog-postgres-db-secret
                  key: USER
            - name:  DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: coog-postgres-db-secret
                  key: PASSWORD
            {{- if .Values.customerBackend.extraEnv }}
            {{- range $key, $value := .Values.customerBackend.extraEnv }}
            - name:  {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
          ports:
            - name: http
              containerPort: 1337
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.customerBackend.resources | nindent 12 }}
      {{- with .Values.customerBackend.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.customerBackend.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.customerBackend.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
{{- if .Values.customerBackend.dnsPolicy }}
      dnsPolicy: {{ .Values.customerBackend.dnsPolicy }}
{{- end }}
{{- if .Values.customerBackend.dnsConfig }}
      dnsConfig:
{{ toYaml .Values.customerBackend.dnsConfig | indent 8 }}
{{- end }}
{{- end }}
