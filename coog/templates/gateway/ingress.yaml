{{- if (or .Values.frontCore.enabled
          .Values.apiB2c.enabled
          .Values.apiReferential.enabled
          .Values.b2c.enabled
          .Values.b2b.enabled
          .Values.customerBackend.enabled
          .Values.customerFrontend.enabled
          .Values.web.enabled)
-}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "general.names.fullname" . }}
  labels: {{- include "general.labels.standard" . | nindent 4 }}
  annotations:
  {{- if and .Values.ingress.thisTls.letsencrypt .Values.ingress.thisTls.enabled }}
    cert-manager.io/cluster-issuer: letsencrypt
  {{- end }}
  {{- if $.Values.maintenanceMode.enabled }}
    nginx.ingress.kubernetes.io/custom-http-errors: {{ .Values.maintenanceMode.ingress.nginx.customhttperrors }}
    nginx.ingress.kubernetes.io/default-backend: {{ printf "%s-maintenance" (include "general.names.short" .) }}
    nginx.ingress.kubernetes.io/whitelist-source-range: {{ join "," (.Values.ingress.nginx.whiteList.trustedCidr) }}
  {{- range $key, $value := $.Values.maintenanceMode.ingress.annotations }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  {{- else }}
  {{- if eq (default .Values.ingress.nginx.whiteList.managementMode .Values.frontCore.gateway.ingress.nginx.whiteList.managementMode) "append" }}
    nginx.ingress.kubernetes.io/whitelist-source-range: {{ join "," (concat .Values.ingress.nginx.whiteList.trustedCidr .Values.ingress.nginx.whiteList.publicCidr .Values.frontCore.gateway.ingress.nginx.whiteList.publicCidr) | quote }}
  {{- else if eq (default .Values.ingress.nginx.whiteList.managementMode .Values.frontCore.gateway.ingress.nginx.whiteList.managementMode) "replace" }}
    nginx.ingress.kubernetes.io/whitelist-source-range: {{ join "," (concat .Values.ingress.nginx.whiteList.trustedCidr (default .Values.ingress.nginx.whiteList.publicCidr .Values.frontCore.gateway.ingress.nginx.whiteList.publicCidr)) | quote }}
  {{- else }}
    nginx.ingress.kubernetes.io/whitelist-source-range: 127.0.0.1/32
  {{- end }}
  {{- end }}
  {{- range $key, $value := .Values.ingress.annotations}}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  {{- range $key, $value := .Values.frontCore.gateway.ingress.annotations }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
spec:
  {{- if and .Values.ingress.thisTls.enabled .Values.ingress.host (or .Values.ingress.thisTls.letsencrypt .Values.ingress.thisTls.externalCertificate.enabled) }}
  tls:
    {{- if or .Values.ingress.thisTls.letsencrypt .Values.ingress.thisTls.externalCertificate.enabled }}
    - hosts:
        - {{ .Values.ingress.host | quote }}
      secretName: {{ default (printf "%s-tls" .Values.ingress.host) .Values.ingress.thisTls.externalCertificate.name }}
    {{- end }}
    {{- if .Values.ingress.thisTls.configuration }}
    {{- include "general.tplvalues.render" (dict "value" .Values.ingress.thisTls.configuration "context" $) | nindent 4 }}
    {{- end }}
  {{- end }}
  ingressClassName: {{ .Values.ingress.className | quote }}
  rules:
    - host: {{ .Values.ingress.host | quote }}
      http:
        paths:
        {{- range .Values.frontCore.gateway.ingress.defaultPaths }}
        - path: {{ . | quote }}
          pathType: ImplementationSpecific
          backend:
            service:
              name: {{ include "general.names.fullname" $ }}
              port:
                number: 80
        {{- end }}
  {{- range .Values.frontCore.gateway.ingress.hosts }}
    - host: {{ .host | quote }}
      http:
        paths:
        {{- range .paths }}
        - path: {{ . | quote }}
          pathType: ImplementationSpecific
          backend:
            service:
              name: {{ include "general.names.fullname" $ }}
              port:
                number: 80
        {{- end }}
  {{- end }}
{{- end }}

