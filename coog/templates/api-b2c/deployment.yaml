{{- if (or .Values.b2c.enabled
          .Values.customerBackend.enabled
          .Values.customerFrontend.enabled)
-}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "general.names.fullname" . }}
  labels: {{- include "general.labels.standard" . | nindent 4 }}
spec:
  replicas: {{ default .Values.replicaCount .Values.apiB2c.replicaCount }}
  strategy:
    type: {{ default .Values.strategy.type .Values.apiB2c.strategy.type }}
  selector:
    matchLabels: {{- include "general.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{- include "general.labels.standard" . | nindent 8 }}
      annotations:
        {{- if .Values.extraEnvVar }}
        checksum/configmap-global: {{ include (printf "%s/%s" $.Template.BasePath "configmap-global.yaml") . | sha256sum  }}
        {{- end }}
        checksum/configmap-frontcore: {{ include (printf "%s/%s" $.Template.BasePath "configmap-frontcore.yaml") . | sha256sum  }}
        {{- if .Values.apiB2c.extraEnvVar }}
        checksum/configmap: {{ include (printf "%s/%s/%s" $.Template.BasePath (base (dir .Template.Name)) "configmap.yaml") . | sha256sum }}
        {{- end }}
        checksum/secret-global: {{ include (printf "%s/%s" $.Template.BasePath "secret-global.yaml") . | sha256sum  }}
        {{- if (and .Values.secrets .Values.secrets.frontCore .Values.secrets.frontCore.extraEnvVar) }}
        checksum/secret-frontcore: {{ include (printf "%s/%s" $.Template.BasePath "secret-frontcore.yaml") . | sha256sum  }}
        {{- end }}
        {{- if (and .Values.secrets .Values.secrets.apiB2c .Values.secrets.apiB2c.extraEnvVar) }}
        checksum/secret: {{ include (printf "%s/%s/%s" $.Template.BasePath (base (dir .Template.Name)) "secret.yaml") . | sha256sum }}
        {{- end }}
    spec:
      imagePullSecrets:
        - name: {{ (default "docker-registry" (and .Values.imageCredentials .Values.imageCredentials.name)) }}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
        privileged: false
        procMount: Default
        runAsNonRoot: true
        runAsUser: {{ default .Values.securityContext.runAsUser .Values.apiB2c.securityContext.runAsUser }}
        runAsGroup: {{ default .Values.securityContext.runAsGroup .Values.apiB2c.securityContext.runAsGroup }}
      containers:
        - name: {{ include "general.names.name" . }}
          image: "{{ default .Values.image.repository .Values.apiB2c.image.repository }}/{{ .Values.apiB2c.image.name }}:{{ default .Values.image.tag .Values.apiB2c.image.tag }}"
          imagePullPolicy: {{ default .Values.image.pullPolicy .Values.apiB2c.image.pullPolicy | quote }}
          envFrom:
            {{- if .Values.extraEnvVar }}
            - configMapRef:
                name: {{ printf "%s-global-configuration" (include "general.names.short" .) }}
            {{- end }}
            - configMapRef:
                name: {{ printf "%s-frontcore-configuration" (include "general.names.short" .) }}
            {{- if .Values.apiB2c.extraEnvVar }}
            - configMapRef:
                name: {{ printf "%s-configuration" (include "general.names.fullname" .) }}
            {{- end }}
            - secretRef:
                name: {{ printf "%s-global-configuration" (include "general.names.short" .) }}
            {{- if (and .Values.secrets .Values.secrets.frontCore .Values.secrets.frontCore.extraEnvVar) }}
            - secretRef:
                name: {{ printf "%s-frontcore-configuration" (include "general.names.short" .) }}
            {{- end }}
            {{- if (and .Values.secrets .Values.secrets.apiB2c .Values.secrets.apiB2c.extraEnvVar) }}
            - secretRef:
                name: {{ printf "%s-configuration" (include "general.names.fullname" .) }}
            {{- end }}
          ports:
            - name: http
              containerPort: 3000
          startupProbe:
            httpGet:
              path: /
              port: http
            {{- include "general.tplvalues.render" (dict "value" (default .Values.startupProbe .Values.apiB2c.startupProbe) "context" $) | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /
              port: http
            {{- include "general.tplvalues.render" (dict "value" (default .Values.livenessProbe .Values.apiB2c.livenessProbe) "context" $) | nindent 12 }}
          readinessProbe:
            httpGet:
              path: /
              port: http
            {{- include "general.tplvalues.render" (dict "value" (default .Values.readinessProbe .Values.apiB2c.readinessProbe) "context" $) | nindent 12 }}
          resources: {{- toYaml .Values.apiB2c.resources | nindent 12 }}
      {{- with default .Values.nodeSelector .Values.apiB2c.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with default .Values.affinity .Values.apiB2c.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with default .Values.tolerations .Values.apiB2c.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if default .Values.dnsPolicy .Values.apiB2c.dnsPolicy }}
      dnsPolicy: {{ default .Values.dnsPolicy .Values.apiB2c.dnsPolicy }}
      {{- end }}
      {{- if default .Values.dnsConfig .Values.apiB2c.dnsConfig }}
      dnsConfig: {{- toYaml default .Values.dnsConfig .Values.apiB2c.dnsConfig | indent 8 }}
      {{- end }}
{{- end }}
