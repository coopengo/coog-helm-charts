#############################################################################################################################
#                                      Global configuration applied to all components                                       #
#############################################################################################################################

# -- Number of pod for all components. It can be customized for each component.
# e.g:
# coog:
#   replicaCount: 1
replicaCount: 1

# -- Strategy used to replace old pods with newest. It can be customized for each component.
# e.g:
# coog:
#   strategy:
#     type: Recreate
#
# ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
# values: Recreate or RollingUpdate
# Note: it's not apply on dependencies
strategy:
  type: Recreate

# -- Configure Container Security Context. It can be customized for each component.
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
# @param securityContext.runAsUser Set components containers' Security Context runAsUser
securityContext:
  runAsUser: 1003

# -- Setup variables shared to all components.
extraEnvVar: {}

image:
  # -- Tag applied for all components. It can be customized for each component.
  # e.g:
  # coog:
  #   image:
  #     repository: cooghub
  repository: cooghub

  # -- Tag applied for all components. It can be customized for each component.
  # e.g:
  # coog:
  #   image:
  #     tag: coog-master-latest
  tag: "changeme"

  # -- Image Pull Policy applied for all components. It can be customized for each component.
  # e.g:
  # coog:
  #   image:
  #     pullPolicy: Always
  pullPolicy: Always

ingress:
  # -- Define ingressClassName (default: nginx)
  # Ref : https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  className: nginx
  # -- Default host for the ingress record applied for all ingress. It can be customized for each component.
  # e.g:
  # coog:
  #   ingress:
  #     hosts:
  #       - host: coog.local
  #         path: /
  host: coog.local

  # Can't set key as "tls", else warning for Rabbitmq dependencie
  thisTls:
    # -- Enable TLS configuration for the host defined at `ingress.host` parameter
    # TLS certificates will be retrieved from a TLS secret with name: `{{- default (printf "%s-tls" .Values.ingress.host) .Values.ingress.thisTls.externalCertificate.name }}`
    # You can:
    #   - Create a secret with your own certificates.
    #   - Rely on cert-manager to create it by setting the corresponding annotations
    #
    enabled: true

    letsencrypt: true
    
    # -- Use certificates manually created in a secret.
    # - Create a secret with your own certificates with the secret name in format `{{- default (printf "%s-tls" .Values.ingress.host) .Values.ingress.thisTls.externalCertificate.name }}`
    #   e.g:
    #   apiVersion: v1
    #   kind: Secret
    #   metadata:
    #     name: coog.local-tls
    #   type: kubernetes.io/tls
    #   data:
    #     server.crt: |
    #          <crt contents here>
    #     server.key: |
    #          <private key contents here>
    externalCertificate:
      enabled: false
      # -- If your host is "coog.local" you have to create a secret in the same namespace called "coog.local-tls"
      # You can customize the secret name by editing this value
      name: ""

    # -- TLS configuration for additional hostname(s) to be covered with this ingress record
    # ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    # e.g:
    # configuration:
    # - hosts:
    #     - coog.local
    #   secretName: coog.local-tls
    #
    configuration: []

  # -- Default annotations applied to all ingress. It can be customized for each component
  # e.g:
  # coog:
  #   ingress:
  #     annotations:
  #       key: value
  annotations:
    nginx.ingress.kubernetes.io/send-timeout: 3600
    nginx.ingress.kubernetes.io/proxy-connect-timeout: 3600
    nginx.ingress.kubernetes.io/proxy-send-timeout: 3600
    nginx.ingress.kubernetes.io/proxy-read-timeout: 3600
    nginx.ingress.kubernetes.io/proxy-body-size: 100m
    nginx.ingress.kubernetes.io/client-body-buffer-size: 100m

  # -- IP Whitelist behavior :
  # trustedCidr : Ip list which are always allowed. maintenanceMode allow these IPs
  # publicCidr (global + per component) : External IP to allow. We can append this list for each component.
  # These IPs are not allowed when maintenanceMode is enable
  nginx:
    whiteList:
      # -- managementMode define behavior for publicCidr parameter. It can be customized for each component
      # e.g:
      # coog:
      #   ingress:
      #     nginx:
      #       whiteList:
      #         managementMode: append
      #
      # possible values : append or replace
      # append: group trustedCidr + global publicCidr + component publicCidr
      # replace: if publicCidr's component is not empty, it's replace the content of the global public Cidr
      managementMode: append
      trustedCidr:
        - 127.0.0.1/32
      publicCidr: []

# -- Configure options applied to all deployments, liveness, readiness and startup probes
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
# initialDelaySeconds: Initial delay seconds e
# periodSeconds: Period seconds
# timeoutSeconds: Timeout seconds
# failureThreshold: Failure threshold
# successThreshold: Success threshold
#
# -- additional startup time on their first initialization
startupProbe:
  initialDelaySeconds: 2
  periodSeconds: 30
  timeoutSeconds: 30
  successThreshold: 1
  failureThreshold: 3

# -- Sometimes, applications are temporarily unable to serve traffic.
# For example, an application might need to load large data or configuration files during startup,
# or depend on external services after startup. In such cases, you don't want to kill the application,
# but you don't want to send it requests either
readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 30
  timeoutSeconds: 30
  successThreshold: 1
  failureThreshold: 3

# With this configuration, the kubelet will attempt to open a socket to your container on the specified port.
# If it can establish a connection, the container is considered healthy, if it can't it is considered a failure
livenessProbe:
  initialDelaySeconds: 5
  periodSeconds: 30
  timeoutSeconds: 30
  successThreshold: 1
  failureThreshold: 3

# -- Node labels for pod assignment. It can be customized for each component
nodeSelector: {}

# -- Tolerations for pod assignment. It can be customized for each component
tolerations: []

# -- Affinity for pod assignment. It can be customized for each component
affinity: {}

# -- dnsConfig for pod assignment. It can be customized for each component
dnsConfig: {}

# -- dnsPolicy for pod assignment. It can be customized for each component
dnsPolicy: ""

#############################################################################################################################
#                                            Tools / Options                                                                #
#############################################################################################################################

# -- Limite total Resource usage
# Ref: https://kubernetes.io/docs/concepts/policy/resource-quotas/
quota:
  enabled: true
  hard:
    requests:
      cpu: "1"
      memory: "1Gi"
    limits:
      cpu: "2"
      memory: "2Gi"

# -- Create a container to receive unauthorized traffic.
# Allow only "TrustedCIDR" to access to the environment (for tests & confirm that everything work)
# Ref: https://gitlab.com/coopengo/devops/nginx-custom-error-pages
maintenanceMode:
  enabled: true
  image:
    name: nginx-custom-error-pages
    tag: latest

  extraEnvVar: {}
  #   TEMPLATE_NAME: "coopengo"
  #   DEFAULT_ERROR_PAGE: 404
  #   DEFAULT_HTTP_CODE: 404
  #   SHOW_DETAILS: false
  #   DISABLE_L10N: false

  resources:
    limits:
      cpu: 100m
      memory: 100Mi
    requests:
      cpu: 80m
      memory: 80Mi

  ingress:
    nginx:
      customhttperrors: 403
    annotations: {}

#############################################################################################################################
#                                            External dependencies                                                          #
#############################################################################################################################

# -- Default database used by backCore
# Ref: https://artifacthub.io/packages/helm/bitnami/postgresql/11.9.11
postgresql:
  isManaged: true
  # -- Mandatory if isManaged is false else 'host' is automatically added
  # Use an external postgresql server (Database not managed by this chart)
  host: ""
  service:
    ports:
      # default: 5432
      postgresql: ""

# -- Mongodb dependency parameters.
# Ref: https://artifacthub.io/packages/helm/bitnami/mongodb/12.1.31
# Current Ref is the last chart version available with mongodb 5.
# Mongodb is mandatory if we have front / api components enable
mongodb:
  # -- Enable to install mongodb on Kubernetes
  # This is a coog parameter not mongodb
  isManaged: false
  # -- Enable architecture type
  # Should not been changed after first installation !
  # Possibles values: standalone / replicaset
  architecture: standalone
  # -- Define number of mongodb replicaSet to create
  # only when `architecture=replicaset`
  replicaCount: 2
  ## Name of the replica set (only when `architecture=replicaset`)
  ## Ignored when mongodb.architecture=standalone
  replicaSetName: rs0
  # -- Mandatory if isManaged is false and frontCore enabled else 'hosts' is automatically added
  # Use an external mongodb server (Database not managed by this chart)
  # if set, replace default URI
  # default : mongodb://(.Values.mongodb.auth.usernames[0]):(.Values.mongodb.auth.password[0])@(.Release.Name)-mongodb:(.Values.mongodb.service.ports.mongodb)/(.Values.mongodb.auth.databases[0])
  # default for replicaset : mongodb://(.Values.mongodb.auth.usernames[0]):(.Values.mongodb.auth.password[0])@(.Release.Name)-mongodb-0.(.Release.Name)-mongodb-headless.svc.cluster.local:(.Values.mongodb.service.ports.mongodb)/(.Values.mongodb.auth.databases[0])
  # E.g:
  # hosts:
  #   - test0.com:27017
  #   - test1.com:27017
  #   - test2.com:27018
  hosts: []
  # This is a coog parameter not mongodb
  # If set, add URI options
  # Applied on default host AND custom hosts.
  # Option to solve rights issue
  # Must be equal to mongodb.auth.databases[0]
  #- authSource=api-core-services
  uriOptions:
    []
  service:
    ports:
      mongodb: 27017
  updateStrategy:
    type: Recreate
  resources:
    limits:
      cpu: 200m
      memory: 400Mi
    requests:
      cpu: 100m
      memory: 300Mi
  volumePermissions:
    enabled: true
    resources:
      limits:
        cpu: 200m
        memory: 400Mi
      requests:
        cpu: 100m
        memory: 300Mi
  initdbScripts:
    coog_init_script.sh: |
      #!/bin/sh
      echo "Create non-root user on admin database..."
      mongo --port ${MONGODB_PORT_NUMBER} -u ${MONGODB_ROOT_USER} -p ${MONGODB_ROOT_PASSWORD} --authenticationDatabase admin <<EOF
      use ${MONGODB_EXTRA_DATABASES%%,*};
      db.salesroutes.insert({});
      use admin;
      db.createUser(
        {
          user: "${MONGODB_EXTRA_USERNAMES%%,*}",
          pwd: "${MONGODB_EXTRA_PASSWORDS%%,*}",
          roles: [
            { role: "read", db: "admin" }
          ]
        }
      );
      EOF
  persistence:
    storageClass: "efs-sc"
    accessModes: ["ReadWriteOnce"]
    size: 5Gi
    # -- Create a custom persistent volume
    # This is a coog parameter not mongodb
    # Requires mongodb.persistence.enabled: true
    # Requires mongodb.persistence.size: XXGi
    # Requires mongodb.persistence.accessModes: ["XXXX"]
    # capacity.storage is configured with persistentVolume.size
    # accessModes is configured with mongodb.persistence.accessModes
    # ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
    # E.g. for AWS-EFS-CSI-DRIVER
    # volumeMode: Filesystem
    # persistentVolumeReclaimPolicy: Retain
    # csi:
    #   driver: efs.csi.aws.com
    #   volumeHandle: fs-ae66151a                # Must be the ID of the EFS volume created manually
    #   volumeAttributes:
    #       encryptInTransit: false              # By default, this value is true (encrypt network traffic)
    customPersistentVolume:
      mountOptions:
        - tls
      persistentVolumeReclaimPolicy: Retain
      csi:
        driver: efs.csi.aws.com
        volumeHandle: test_id
  # Need to custom timeoutSeconds parameter due to low resources limits
  readinessProbe:
    timeoutSeconds: 30
    periodSeconds: 30
  livenessProbe:
    timeoutSeconds: 30
    periodSeconds: 30

# -- Default message service used by backCore
# Ref: https://artifacthub.io/packages/helm/bitnami/rabbitmq/11.10.2
rabbitmq:
  persistence:
    enabled: false
  service:
    port: 5672
  resources:
    limits:
      cpu: 600m
      memory: 400Mi
    requests:
      cpu: 480m
      memory: 320Mi
  updateStrategyType: RollingUpdate
  extraConfiguration: |-
    consumer_timeout = 172800000
    loopback_users.guest = false
  livenessProbe:
    initialDelaySeconds: 240

#############################################################################################################################
#                                            Coog minimum components                                                        #
#############################################################################################################################

# -- Configuration for coog, celery and cron
backCore:
  image:
    # -- Image repository to run coog, celery & cron
    name: coog
    # repository: ""
    # tag: ""

  # -- coog, celery and cron strategy type.
  # values: Recreate or RollingUpdate
  strategy:
    type: ""

  # -- coog, celery and cron security Context.
  securityContext:
    runAsUser: 1003 # Execute pod with specific user ID
    runAsGroup: 1003 # Execute pod with specific group ID
    fsGroup: 1003 # configuration specifies that the root group (gid=0) is replaced with the group ID on the mounted directory.

  # -- Create Postgres Database for coog
  # by default, the script create a database defined in postgresql.auth.database
  initDatabase: true

  persistentVolume:
    # -- Enable BackCore data persistence using PVC
    enabled: true
    name: workspace-io
    # -- Storage Class & PVC for BackCore data volume
    # If defined, storageClassName: <storageClass>
    # If set to "-", storageClassName: "", which disables dynamic provisioning
    # If undefined (the default) or set to null, no storageClassName spec is
    # set, choosing the default provisioner.
    storageClass: "efs-sc"

    # -- Create a custom storage class
    # Requires persistentVolume.enabled: true
    # Requires persistentVolume.storageClass: name
    # ref: https://kubernetes.io/docs/concepts/storage/storage-classes/
    # E.g. for AWS-EFS-CSI-DRIVER
    # provisioner: efs.csi.aws.com
    # parameters:
    #   provisioningMode: efs-ap          # Must be `efs-ap` to enable dynamic provisioning
    #   fileSystemId: fs-12345678         # Must be the ID of the EFS volume created manually
    #   directoryPerms: "777"             # Default permission of the root directory of the volume
    #   gidRangeStart: "1000"             # optional - Set the range of POSIX Group IDs (GIDs) that are used to set the GID of the AWS access point. If not specified, the default range is 50000-7000000. Each provisioned volume, and thus AWS access point, is assigned a unique GID from this range.
    #   gidRangeEnd: "2000"               # optional - Set the range of POSIX Group IDs (GIDs) that are used to set the GID of the AWS access point. If not specified, the default range is 50000-7000000. Each provisioned volume, and thus AWS access point, is assigned a unique GID from this range.
    #   basePath: "/dynamic_provisioning" # optional - Directory on the EFS volume that is used to create dynamically provisioned volumes. In this case, a PV is provisioned as “/dynamic_provisioning/<random uuid>” on the EFS volume. Only the subdirectory is mounted to pods that use the PV.
    # mountOptions:
    #   - tls
    # reclaimPolicy: Retain
    # allowVolumeExpansion: true
    # volumeBindingMode: Immediate
    customStorageClass: {}

    # -- Create a custom persistent volume
    # Requires persistentVolume.enabled: true
    # Requires persistentVolume.size: XXGi
    # Requires persistentVolume.accessModes: ["XXXX"]
    # capacity.storage is configured with persistentVolume.size
    # accessModes is configured with persistentVolume.accessModes
    # ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
    # E.g. for AWS-EFS-CSI-DRIVER
    # volumeMode: Filesystem
    # persistentVolumeReclaimPolicy: Retain
    # csi:
    #   driver: efs.csi.aws.com
    #   volumeHandle: fs-ae66151a                # Must be the ID of the EFS volume created manually
    #   volumeAttributes:
    #       encryptInTransit: false              # By default, this value is true (encrypt network traffic)
    customPersistentVolume: {}

    # -- Link to an existing persistent volume
    # size parameter must be equal to existing volume.
    # E.g.
    # backCore:
    #   persistentVolume:
    #     existingPersistentVolumeName: "my-existing-persistent-volume"
    existingPersistentVolumeName: ""

    # -- PVC Storage Request for BackCoog
    size: 50Gi

    # -- PVC Access Mode for BackCore
    # Requires persistentVolume.enabled: true
    # If defined, and no customStorageClass is defined, then
    # PVC must be created manually before volume will be bound
    accessModes: ["ReadWriteMany"]

    # -- Provide an existing `PersistentVolumeClaim`
    # Requires persistentVolume.enabled: true
    # If defined, PVC must be created manually before volume will be bound
    existingClaim: ""

  # -- coog, celery and cron configuration for number of workers. It can be customized for each component
  workers:
    number: 1

  # -- Configure environement variables for backCore components (coog, celery, cron (except static : doesn't need configuration))
  # Each value can be modified without override all or delete other parameters
  # Ref: https://github.com/coopengo/coog/blob/master/bin/conf/trytond.conf
  # ex:
  # [web]
  # listen = localhost:8000
  #
  # convert to variable :
  # TRYTOND_WEB__LISTEN: localhost:8000
  extraEnvVar:
    # Following variables must be defined :
    # start
    TRYTOND_EMAIL__FROM: changeme
    TRYTOND_OPTIONS__TABLE_DIMENSION: changeme
    # end
    COOG_IWC: "1"
    COOG_TIMEOUT: "3600"
    LOG_LEVEL: INFO
    TRYTOND_BATCH__ENABLE_CELERY_AUTO_SCALING: "1"
    TRYTOND_CACHE__CLEAN_TIMEOUT: "0"
    TRYTOND_CACHE__RECORD: "50000"
    TRYTOND_DATABASE__LANGUAGE: fr
    TRYTOND_DATABASE__PATH: /workspace/io/edm
    TRYTOND_DEBUG__DISABLE_SYNTAX_ANALYSIS: true
    TRYTOND_DEBUG__VIEWS: false
    TRYTOND_DOCUMENT_API__DOCUMENT_TOKEN_EXPIRATION_MINUTES: "864000"
    TRYTOND_PASSWORD__ENTROPY: "0.1"
    TRYTOND_SEPA_PAYMENT__OUT_DIR: /workspace/io/batch/sepa/sepa_out
    TRYTOND_TZ: Europe/Paris

  coog:
    # -- coog, celery and batch configuration for number of workers
    workers:
      number: ""

    # -- Configure environement variables for this component
    # Each value can be modified without override all or delete other parameters
    extraEnvVar: {}

    ingress:
      # -- Default host for the ingress resource for coog containers'
      defaultPaths:
        - /

      # -- additionals hosts & paths
      # host : required
      # path : optionnal
      # e.g:
      # hosts:
      #   - host: test1.example.com
      #     paths:
      #       - /
      #   - host: test2.example.com
      hosts: []

      annotations:
        nginx.ingress.kubernetes.io/use-proxy-protocol: true

      nginx:
        whiteList:
          # -- Add cors (TRYTOND_WEB_CORS variable) to defaults values defined
          # default values :
          #   - https://<.Values.ingress.host>
          # E.g.
          # cors:
          #   - https://test1.example.com
          #   - https://test2.example.com
          cors: []
          publicCidr: []

    securityContext:
      {}
      # runAsUser: ""

    # -- coog containers' resource requests and limits
    resources:
      limits:
        cpu: 1500m
        memory: 1750Mi
      requests:
        cpu: 1200m
        memory: 1400Mi

    initContainers:
      resources:
        limits:
          cpu: 500m
          memory: 800Mi
        requests:
          cpu: 400m
          memory: 640Mi

  celery:
    workers:
      # -- Number of celery workers to run
      number: ""
      maximumMemory: 512000

    coogCeleryModule: coog_async.coog_celery

    # -- Configure environement variables for this component
    extraEnvVar: {}

    # -- celery containers' resource requests and limits
    resources:
      limits:
        cpu: 400m
        memory: 1000Mi
      requests:
        cpu: 320m
        memory: 800Mi

    single:
      enabled: true
      resources:
        limits:
          cpu: 200m
          memory: 700Mi
        requests:
          cpu: 160m
          memory: 560Mi

    cronJob:
      schedule: "0 20 * * 1-5"
      failedJobsHistoryLimit: 5
      backendConfiguration: true
      # -- workDays: Configuration used when .Values.backCore.celery.cronJob.backendConfiguration = false
      workDays: 4
      # -- workDaysConfig: Configuration used when .Values.backCore.celery.cronJob.backendConfiguration = false
      workDaysConfig: french_work_days
      resources:
        limits:
          cpu: 200m
          memory: 300Mi
        requests:
          cpu: 160m
          memory: 240Mi

  static:
    image:
      # -- static image name
      name: coog-static

    strategy:
      # -- static redeployment strategy type
      type: ""

    ingress:
      # -- Default host for the ingress resource for static containers'
      defaultPaths:
        - /sao
        - /bench
        - /doc

      # -- additionals hosts & paths
      # host : required
      # path : optionnal
      # e.g:
      # hosts:
      #   - host: test1.example.com
      #     path: /
      #   - host: test2.example.com
      hosts: []

      nginx:
        whiteList:
          publicCidr: []

    securityContext:
      {}
      # runAsUser: ""

    # -- static containers' resource requests and limits
    resources:
      limits:
        cpu: 50m
        memory: 80Mi
      requests:
        cpu: 40m
        memory: 64Mi

#############################################################################################################################
#                                            Back Additional components                                                     #
#############################################################################################################################

cron:
  enabled: true

  strategy:
    type: ""

  image:
    # -- cron image repository
    name: coog
  
  securityContext:
    {}
    # runAsUser: ""

  # -- Dynamic ConfigMap variables for cron
  extraEnvVar: {}

  # -- cron configuration for number of workers. It can be customized for each component
  workers:
    number: "3"

  # -- cron containers' resource requests and limits
  resources:
    limits:
      cpu: 200m
      memory: 500Mi
    requests:
      cpu: 160m
      memory: 400Mi

  # -- Configure options applied to cron deployment, liveness, readiness and startup probes
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
  # initialDelaySeconds: Initial delay seconds e
  # periodSeconds: Period seconds
  # timeoutSeconds: Timeout seconds
  # failureThreshold: Failure threshold
  # successThreshold: Success threshold
  #
  # With this configuration, the kubelet will attempt to open a socket to your container on the specified port.
  # If it can establish a connection, the container is considered healthy, if it can't it is considered a failure
  livenessProbe:
    initialDelaySeconds: 0
    periodSeconds: 120
    timeoutSeconds: 30
    successThreshold: 1
    failureThreshold: 2

  # -- additional startup time on their first initialization
  startupProbe:
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 30
    successThreshold: 1
    failureThreshold: 3

libroconv:
  # -- Deploy libroconv container(s)
  enabled: true
  strategy:
    type: ""

  image:
    # -- libroconv image repository
    name: coog-libroconv

  securityContext:
    {}
    # runAsUser: ""

  # -- libroconv containers' resource requests and limits
  resources:
    limits:
      cpu: 300m
      memory: 300Mi
    requests:
      cpu: 240m
      memory: 240Mi

  livenessProbe:
    initialDelaySeconds: 0
    periodSeconds: 60
    timeoutSeconds: 30
    successThreshold: 1
    failureThreshold: 2
  readinessProbe:
    initialDelaySeconds: 0
    periodSeconds: 30
    timeoutSeconds: 30
    successThreshold: 1
    failureThreshold: 3

#############################################################################################################################
#                                            Front Minimum components                                                       #
#############################################################################################################################

# -- FrontCore
## If one frontend component is enabled: true, it will enable by default the frontCore components (gateway, api & api-identity-manager)
# List of front components :
# - gateway
# - api
# - apiIdentityManager
# - apiB2c
# - apiReferential
# - b2c
# - b2b
# - customerBackend
# - customerFrontend
# - web
#
# If you enable one front component, you must set mongodb.isManaged: true
frontCore:
  enabled: true
  extraEnvVar:
    JWT_EXPIRATION: 3600

  gateway:
    strategy:
      type: ""

    image:
      # -- gateway image repository
      name: coog-gateway

    # -- Configure environement variables for this component
    extraEnvVar:
      BASE_PATH: "/gateway"
      COOG_GATEWAY_BASE_PATH: "/gateway"
      COOG_GATEWAY_PORT: 8000
      COOG_MODULE: true
      COOG_TOKEN_MODULE: true
      FACEBOOK_MODULE: false
      GOOGLE_MODULE: false

    ingress:
      # -- Default host for the ingress resource for gateway containers
      defaultPaths:
        - /gateway(/|$)(.*)

      # -- additionals hosts & paths
      # host : required
      # path : optionnal
      # e.g:
      # hosts:
      #   - host: test1.example.com
      #     path: /
      #   - host: test2.example.com
      hosts: []

      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: "/$2"

      nginx:
        whiteList:
          # -- Add cors (WHITELIST variable) to defaults values defined
          # default values :
          #   - http://localhost:4000
          #   - https://<.Values.ingress.host>
          # E.g.
          # cors:
          #   - https://test1.example.com
          #   - https://test2.example.com
          cors: []

    securityContext:
      {}
      # runAsUser: ""

    # -- gateway containers resource requests and limits
    resources:
      limits:
        cpu: 100m
        memory: 100Mi
      requests:
        cpu: 80m
        memory: 80Mi

  api:
    strategy:
      type: ""

    image:
      # -- api-v2 image repository
      name: coog-api

    # -- Configure environement variables for this component
    extraEnvVar: {}

    securityContext:
      {}
      # runAsUser: ""

    # -- api containers resource requests and limits
    resources:
      limits:
        cpu: 500m
        memory: 100Mi
      requests:
        cpu: 500m
        memory: 100Mi

  apiIdentityManager:
    strategy:
      type: ""

    image:
      # -- api-identity-manager image repository
      name: coog-api-identity-manager

    # -- Configure environement variables for this component
    extraEnvVar: {}

    securityContext:
      {}
      # runAsUser: ""

    # -- apiIdentityManager containers' resource requests and limits
    resources:
      limits:
        cpu: 50m
        memory: 70Mi
      requests:
        cpu: 50m
        memory: 56Mi

#############################################################################################################################
#                                            Front Additional components                                                    #
#############################################################################################################################

##############################
#      Components B2B        #
##############################

b2b:
  enabled: true
  strategy:
    type: ""

  image:
    # -- b2b image repository
    name: coog-b2b

  ingress:
    # -- Default host for the ingress resource for gateway containers
    defaultPaths:
      - "/portal(/|$)(.*)"

    # -- additionals hosts & paths
    # host : required
    # path : optionnal
    # e.g:
    # hosts:
    #   - host: test1.example.com
    #     path: /
    #   - host: test2.example.com
    hosts: []

    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/$2"

    nginx:
      whiteList:
        publicCidr: []

  securityContext:
    {}
    # runAsUser: ""

  # -- b2b containers' resource requests and limits
  resources:
    limits:
      cpu: 250m
      memory: 50Mi
    requests:
      cpu: 200m
      memory: 40Mi

web:
  enabled: true
  strategy:
    type: ""

  image:
    # -- web image repository
    name: coog-web

  # -- Configure environement variables for this component
  extraEnvVar:
    COOG_API_API_PATH: /web/api
    COOG_API_APP_PATH: /web

  securityContext:
    {}
    # runAsUser: ""

  # -- web containers' resource requests and limits
  resources:
    limits:
      cpu: 500m
      memory: 200Mi
    requests:
      cpu: 400m
      memory: 160Mi

apiReferential:
  # -- Deploy apiReferential container(s)
  enabled: true
  strategy:
    type: ""

  image:
    # -- apiReferential image repository
    name: coog-api-referential

  # -- Configure environement variables for this component
  extraEnvVar: {}

  securityContext:
    {}
    # runAsUser: ""

  # -- apiReferential containers' resource requests and limits
  resources:
    limits:
      cpu: 200m
      memory: 400Mi
    requests:
      cpu: 160m
      memory: 320Mi

##############################
#      Components B2C        #
##############################

b2c:
  # -- Deploy b2c + apiB2c container(s)
  enabled: true
  strategy:
    type: ""

  image:
    # -- b2c image repository
    name: coog-app-b2c

  ingress:
    # -- Default host for the ingress resource for gateway containers
    defaultPaths:
      - /customers/myspace(/|$)(.*)

    # -- additionals hosts & paths
    # host : required
    # path : optionnal
    # e.g:
    # hosts:
    #   - host: test1.example.com
    #     path: /
    #   - host: test2.example.com
    hosts: []

    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/$2"

    nginx:
      whiteList:
        publicCidr: []

  securityContext:
    {}
    # runAsUser: ""

  # -- b2c containers' resource requests and limits
  resources:
    limits:
      cpu: 50m
      memory: 50Mi
    requests:
      cpu: 50m
      memory: 40Mi

customerBackend:
  # -- Deploy b2b container(s)
  enabled: true
  strategy:
    type: ""

  image:
    # -- b2b image repository
    name: coog-customer-backend

  # -- Database configuration for the component
  database:
    # -- Default : strapi-{{ .Release.Name }}
    name: ""

  # -- Configure environement variables for this component
  extraEnvVar: {}

  ingress:
    # -- Default host for the ingress resource for gateway containers
    defaultPaths:
      - /v1/customer(/|$)(.*)

    # -- additionals hosts & paths
    # host : required
    # path : optionnal
    # e.g:
    # hosts:
    #   - host: test1.example.com
    #     path: /
    #   - host: test2.example.com
    hosts: []

    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/$2"

    nginx:
      whiteList:
        publicCidr: []

  securityContext:
    {}
    # runAsUser: ""

  # -- b2b containers' resource requests and limits
  resources:
    limits:
      cpu: 400m
      memory: 300Mi
    requests:
      cpu: 320m
      memory: 240Mi

  initContainers:
    resources:
      limits:
        cpu: 400m
        memory: 500Mi
      requests:
        cpu: 320m
        memory: 400Mi

customerFrontend:
  # -- Deploy customerFrontend container(s)
  enabled: true
  strategy:
    type: ""

  image:
    # -- customerFrontend image repository
    name: coog-customer-frontend

  # -- Configure environement variables for this component
  extraEnvVar:
    GATSBY_API_URL: "/v1/customer"

  ingress:
    # -- Default host for the ingress resource for gateway containers
    defaultPaths:
      - /customer(/|$)(.*)

    # -- additionals hosts & paths
    # host : required
    # path : optionnal
    # e.g:
    # hosts:
    #   - host: test1.example.com
    #     path: /
    #   - host: test2.example.com
    hosts: []

    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/$2"

    nginx:
      whiteList:
        publicCidr: []

  securityContext:
    {}
    # runAsUser: ""

  # -- customerFrontend containers' resource requests and limits
  resources:
    limits:
      cpu: 100m
      memory: 100Mi
    requests:
      cpu: 80m
      memory: 80Mi

  initContainers:
    resources:
      limits:
        cpu: 400m
        memory: 2000Mi
      requests:
        cpu: 320m
        memory: 1600Mi

# -- Is enable if one off following front component is enable :
# - b2c
# - customerBackend
# - customerFrontend
apiB2c:
  strategy:
    type: ""

  image:
    # -- apiB2c image repository
    name: coog-api-b2c

  # -- Configure environement variables for this component
  extraEnvVar: {}

  securityContext:
    {}
    # runAsUser: ""

  # -- apiB2c containers' resource requests and limits
  resources:
    limits:
      cpu: 50m
      memory: 50Mi
    requests:
      cpu: 50m
      memory: 40Mi
