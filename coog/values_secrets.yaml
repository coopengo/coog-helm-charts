# -- Configure secret with docker image registry credentials.
imageCredentials:
  # -- secret to be used to download image for all components.
  name: docker-registry
  # -- Registry URL
  registry: docker.io
  # -- Registry account username
  username: ""
  # -- Registry account password
  password: ""
  # -- Registry account email
  email: ""


# -- PostgreSQL dependency parameters.
# Pour Coreye, communiquer le nouveau fonctionnement pour l'injection des values postgresql
postgresql:
  auth:
    # -- Admin User for the "postgres" admin user (Mandatory if isManaged is false and admin user account is not "postgres")
    # This is a coog parameter not postgresql
    # This parameter is needed to init database on first deployment
    # default: "postgres"
    adminUsername: ""
    # -- Password for the admin user (If empty, auto-generated for postgresql.isManaged = true - TODO)
    # default: ""
    postgresPassword: ""
    # -- Name for a custom user to create (if isManaged is true) and/or use to connect database
    # default: ""
    username: "coog"
    # -- Password for the custom user to create (if isManaged is true) and/or use to connect database
    # default: ""
    password: "changeme"
    # -- Name for a custom database to create (if isManaged is true) and/or use
    # default : .Release.Name
    database: ""

# -- RabbitMq sensitive parameters.
rabbitmq:
  auth:
    username: coog
    password: "changeme"

# -- Mongodb sensitive parameters.
mongodb:
  auth:
    enabled: true
    databases: ["api-core-services"]
    rootPassword: admin
    usernames: ["coog"]
    passwords: ["admin"]
    # -- Mongodb URI
    # This is a coog parameter not mongodb
    # This parameter will overwrite theses variables:
    # MONGO_USER
    # MONGO_PASSWORD
    # MONGO_PORT
    # MONGO_HOST
    # MONGO_DB_NAME
    # e.g
    # uri: "mongodb://[username:password@]host1[:port1][,...hostN[:portN]][/[defaultauthdb][?options]]"
    uri: ""

secrets:
  # -- Global secrets
  extraEnvVar:
    # back
    # -- # Loaded in coog-api-b2c too
    COOG_DOCUMENT_TOKEN_SECRET: "changeme"
    # front
    # JWT_ENCRYPTION: "changeme" # auto-generated if not define
    # -- equal to JWT_ENCRYPTION if not set
    # JWT_INTERNAL_ENCRYPTION: "changeme" # auto-generated if not define

  # -- backCore
  # We can configure secrets shared with backCore components in this block.
  backCore:
    extraEnvVar:
      # -- Mandatory
      # TRYTOND_SESSION__PASSPHRASE: "changeme" # auto-generated if not define
      TRYTOND_EMAIL__URI: "changeme"

    coog:
      # -- Custom secret applied only to coog component
      extraEnvVar: {}

    celery:
      # -- Custom secret applied only to celery component
      extraEnvVar: {}

    cron:
      # -- Custom secret applied only to cron component
      extraEnvVar: {}

  # -- FrontCore
  # If one frontend component is enabled: true, it will enable by default the frontCore components (gateway, api & apiIdentityManager)
  # We can configure secrets shared with frontCore components in this block.
  frontCore:
    extraEnvVar: {}

    gateway:
      # -- config environment variables are applied to frontCore (gateway, api & apiIdentityManager)
      extraEnvVar:
        COOG_WEB_TOKEN: "changeme"
        FORCEDOTCOM_CLIENT_ID: "changeme"
        FORCEDOTCOM_CLIENT_SECRET: "changeme"

    api:
      extraEnvVar: {}

    apiIdentityManager:
      extraEnvVar: {}

  apiReferential:
    extraEnvVar: {}

  apiB2c:
    extraEnvVar: {}

  customerBackend:
    extraEnvVar: {}

  customerFrontend:
    extraEnvVar:
      GATSBY_GEOAPIFY_API_KEY: "changeme"