#############################################################################################################################
#                                      Global configuration applied to all components                                       #
#############################################################################################################################

# -- Number of pod for all components. It can be customized for each component.
# e.g:
# coog:
#   replicaCount: 1
replicaCount: 1

# -- Strategy used to replace old pods with newest. It can be customized for each component.
# e.g:
# coog:
#   strategy:
#     type: Recreate
#
# ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
# values: Recreate or RollingUpdate
# If quota.rollingUpdate: false default value is "Recreate"
strategy:
  type: Recreate

# -- ## Configure Container Security Context. It can be customized for each component.
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
# @param securityContext.runAsUser Set components containers' Security Context runAsUser
securityContext:
  runAsUser: 1000

config:
  # back
  JWT_EXPIRATION: 3600
  # front


# -- Configure secret with docker image registry credentials.
imageCredentials:
  # -- secret to be used to download image for all components.
  name: docker-registry
  # -- Registry URL
  registry: docker.io
  # -- Registry account username
  username: ""
  # -- Registry account password
  password: ""
  # -- Registry account email
  email: ""

image:
  # -- Tag applied for all components. It can be customized for each component.
  # e.g:
  # coog:
  #   image:
  #     repository: cooghub
  repository: cooghub

  # -- Tag applied for all components. It can be customized for each component.
  # e.g:
  # coog:
  #   image:
  #     tag: coog-master-latest
  tag: "changeme"

  # -- Image Pull Policy applied for all components. It can be customized for each component.
  # e.g:
  # coog:
  #   image:
  #     pullPolicy: Always
  pullPolicy: Always

ingress:
  # -- Default host for the ingress record applied for all ingress. It can be customized for each component.
  # e.g:
  # coog:
  #   ingress:
  #     hosts:
  #       - host: coog.local
  #         path: /
  host: coog.local

  # Can't set key as "tls", else warning for Rabbitmq dependencie
  thisTls:
    # -- Enable TLS configuration for the host defined at `ingress.host` parameter
    # TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.host }}`
    # You can:
    #   - Create a secret with your own certificates.
    #     e.g:
    #     apiVersion: v1
    #     kind: Secret
    #     metadata:
    #       name: coog.local-tls
    #     type: kubernetes.io/tls
    #     data:
    #       server.crt: |
    #            <crt contents here>
    #       server.key: |
    #            <private key contents here>
    #   - Rely on cert-manager to create it by setting the corresponding annotations
    #
    enabled: true

    letsencrypt: true
    # -- TLS configuration for additional hostname(s) to be covered with this ingress record
    # ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    # e.g:
    # configuration:
    # - hosts:
    #     - coog.local
    #   secretName: coog.local-tls
    #
    configuration: []

  # -- Default annotations applied to all ingress. It can be customized for each component
  # e.g:
  # coog:
  #   ingress:
  #     annotations: 
  #       key: value
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/send-timeout: 3600
    nginx.ingress.kubernetes.io/proxy-connect-timeout: 3600
    nginx.ingress.kubernetes.io/proxy-send-timeout: 3600
    nginx.ingress.kubernetes.io/proxy-read-timeout: 3600
    nginx.ingress.kubernetes.io/proxy-body-size: 100m
    nginx.ingress.kubernetes.io/client-body-buffer-size: 100m

  # -- Cr√©ation de 3 modes de configuration :
  # trustedCidr : Ip list which are always allowed. maintenanceMode allow these IPs
  # publicCidr (global + per component) : External IP to allow. We can append this list for each component.
  # These IPs are not allowed when maintenanceMode is enable
  nginx:
    whiteList:
      trustedCidr:
        - 127.0.0.1/32
      publicCidr: []

# -- Configure options applied to all deployments, liveness, readiness and startup probes
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
# initialDelaySeconds: Initial delay seconds e
# periodSeconds: Period seconds
# timeoutSeconds: Timeout seconds
# failureThreshold: Failure threshold
# successThreshold: Success threshold
#
# -- additional startup time on their first initialization
startupProbe:
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 30
  successThreshold: 1

# With this configuration, the kubelet will attempt to open a socket to your container on the specified port. 
# If it can establish a connection, the container is considered healthy, if it can't it is considered a failure
livenessProbe:
  initialDelaySeconds: 15
  periodSeconds: 30
  timeoutSeconds: 30
  successThreshold: 1
  failureThreshold: 3

# -- Sometimes, applications are temporarily unable to serve traffic. 
# For example, an application might need to load large data or configuration files during startup, 
# or depend on external services after startup. In such cases, you don't want to kill the application, 
# but you don't want to send it requests either
readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 30
  timeoutSeconds: 30
  successThreshold: 1
  failureThreshold: 3

# -- Node labels for pod assignment. It can be customized for each component
nodeSelector: {}

# -- Tolerations for pod assignment. It can be customized for each component
tolerations: []

# -- Affinity for pod assignment. It can be customized for each component
affinity: {}

# -- dnsConfig for pod assignment. It can be customized for each component
dnsConfig: {}

# -- dnsPolicy for pod assignment. It can be customized for each component
dnsPolicy: {}

#############################################################################################################################
#                                            Tools / Options                                                                #
#############################################################################################################################

quota:
  enabled: false
  rollingUpdate: false
  config:
    cpuRequest: 0
    memoryRequest: 0
    cpuLimit: 0
    memoryLimit: 0

maintenanceMode:
  enabled: false
  image:
    name: nginx-custom-error-pages
    tag: latest

  config: {}
  #   TEMPLATE_NAME: "coopengo"
  #   DEFAULT_ERROR_PAGE: 404
  #   DEFAULT_HTTP_CODE: 404
  #   SHOW_DETAILS: false
  #   DISABLE_L10N: false

  resources:
    limits:
      cpu: 100m
      memory: 100Mi
    requests:
      cpu: 100m
      memory: 100Mi

  ingress:
    nginx:
      customhttperrors: 403
    annotations: {}

#############################################################################################################################
#                                            External dependencies                                                          #
#############################################################################################################################

postgresql:
  isManaged: true
  # -- Mandatory if isManaged is false else 'host' is automatically added
  # Use an external postgresql server (Database not managed by this chart)
  host: ""
  service:
    ports:
      postgresql: 5432

# -- Mongodb dependency parameters.
# Ref: https://artifacthub.io/packages/helm/bitnami/mongodb/10.30.12
# Current Ref is the last chart version available for kubernetes 1.18 (Cluster version to Coreye)
# Mongodb is mandatory if we have front / api components enable
mongodb:
  # -- Enable to install mongodb on Kubernetes
  # This is a coog parameter not mongodb
  isManaged: false
  # -- Mandatory if isManaged is false else 'host' is automatically added
  # Use an external mongodb server (Database not managed by this chart)
  host: ""
  service:
    ports:
      mongodb: 27017
  updateStrategy:
    type: Recreate
  resources:
    limits:
      cpu: 100m
      memory: 300Mi
    requests:
      cpu: 100m
      memory: 300Mi
  volumePermissions:
    enabled: true
    resources:
      limits:
        cpu: 100m
        memory: 300Mi
      requests:
        cpu: 100m
        memory: 300Mi

rabbitmq:
  persistence:
    enabled: false
  resources:
    limits:
      cpu: 600m
      memory: 400Mi
    requests:
      cpu: 600m
      memory: 400Mi
  updateStrategyType: RollingUpdate
  extraConfiguration: |-
    consumer_timeout = 172800000
    loopback_users.guest = false
  livenessProbe:
    initialDelaySeconds: 240


#############################################################################################################################
#                                            Coog minimum components                                                        #
#############################################################################################################################

backCore:
  image:
    # -- Image repository to run coog, celery & cron
    name: coog
    # repository: ""
    # tag: ""

  # -- coog, celery and cron configuration for number of workers. It can be customized for each component
  workers:
    number: 1

  # -- Configure environement variables for backCore components (coog, celery, cron (except static : doesn't need configuration))
  # Each value can be modified without override all or delete other parameters
  # Ref: https://github.com/coopengo/coog/blob/master/bin/conf/trytond.conf
  # ex:
  # [web]
  # listen = localhost:8000
  #
  # convert to variable :
  # TRYTOND_WEB__LISTEN: localhost:8000
  config:
  # Following variables must be defined :
  # start
    TRYTOND_EMAIL__FROM: changeme
    TRYTOND_OPTIONS__TABLE_DIMENSION: changeme
  # end
    COOG_TIMEOUT: 3600
    COOG_IWC: 1
    LOG_LEVEL: INFO
    TRYTOND_DATABASE__LANGUAGE: fr
    TRYTOND_DEBUG__DISABLE_SYNTAX_ANALYSIS: true
    TRYTOND_BATCH__ENABLE_CELERY_AUTO_SCALING: 1
    TRYTOND_TZ: Europe/Paris
    TRYTOND_DATABASE__PATH: "/workspace/io/edm"
    TRYTOND_DOCUMENT_API__DOCUMENT_TOKEN_EXPIRATION_MINUTES: 864000
    TRYTOND_PASSWORD__ENTROPY: "0.1"
    TRYTOND_CACHE__RECORD: 50000
    TRYTOND_CACHE__CLEAN_TIMEOUT: 0

  coog:
    # -- coog, celery and batch configuration for number of workers
    workers:
      number: ""

    # -- Configure environement variables for this component
    # Each value can be modified without override all or delete other parameters
    config: {}

    persistentVolume:
      enabled: true
      name: workspace-io
      io: /workspace/io/
      storageClass: nfs-client
      size: 10Gi
      claim:
        name: ""

    ingress:
      # -- Default host for the ingress resource for coog containers'
      hosts:
        - paths:
            - /

      annotations:
        nginx.ingress.kubernetes.io/use-proxy-protocol: true
      
      nginx:
        whiteList:
          publicCidr: []

    securityContext: {}
      # runAsUser: ""

    # -- coog containers' resource requests and limits
    resources:
      limits:
        cpu: 1500m
        memory: 1750Mi
      requests:
        cpu: 1500m
        memory: 1750Mi

    initContainers:
      resources:
        limits:
          cpu: 500m
          memory: 800Mi
        requests:
          cpu: 500m
          memory: 800Mi



  celery:
    workers:
      # -- Number of celery workers to run
      number: ""
      maximumMemory: 512000

    # -- Configure environement variables for this component
    config: {}

    # -- celery containers' resource requests and limits
    resources:
      limits:
        cpu: 400m
        memory: 1000Mi
      requests:
        cpu: 400m
        memory: 1000Mi



cron:
    # -- Dynamic ConfigMap variables for cron
    config:
      TRYTOND_DEBUG__VIEWS: false

    coogCeleryModule: coog_async.coog_celery

    # -- cron containers' resource requests and limits
    resources:
      limits:
        cpu: 200m
        memory: 500Mi
      requests:
        cpu: 200m
        memory: 500Mi

    # -- Configure options applied to cron deployment, liveness, readiness and startup probes
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
    # initialDelaySeconds: Initial delay seconds e
    # periodSeconds: Period seconds
    # timeoutSeconds: Timeout seconds
    # failureThreshold: Failure threshold
    # successThreshold: Success threshold
    #
    # With this configuration, the kubelet will attempt to open a socket to your container on the specified port. 
    # If it can establish a connection, the container is considered healthy, if it can't it is considered a failure
    livenessProbe:
      initialDelaySeconds: 30
      periodSeconds: 120
      timeoutSeconds: 10
      successThreshold: 1
      failureThreshold: 2

    # -- additional startup time on their first initialization
    startupProbe:
      initialDelaySeconds: 30
      periodSeconds: 120
      timeoutSeconds: 10
      successThreshold: 1
      failureThreshold: 2



  static:
    image:
      # -- static image name
      name: coog-static

    strategy:
      # -- static redeployment strategy type
      type: ""

    ingress:
      # -- Default host for the ingress resource for static containers'
      hosts:
        - paths:
            - /sao
            - /bench
            - /doc
      nginx:
        whiteList:
          publicCidr: []

    securityContext: {}
      # runAsUser: ""

    # -- static containers' resource requests and limits
    resources:
      limits:
        cpu: 50m
        memory: 80Mi
      requests:
        cpu: 50m
        memory: 80Mi
  
#############################################################################################################################
#                                            Back Additional components                                                     #
#############################################################################################################################

libroconv:
  # -- Deploy libroconv container(s)
  enabled: false

  image:
    # -- libroconv image repository
    name: coog-libroconv

  securityContext: {}
    # runAsUser: ""

  # -- libroconv containers' resource requests and limits
  resources:
    limits:
      cpu: 300m
      memory: 300Mi
    requests:
      cpu: 300m
      memory: 300Mi

  livenessProbe:
    initialDelaySeconds: 0
    periodSeconds: 60
    timeoutSeconds: 30
    successThreshold: 1
    failureThreshold: 2
  readinessProbe:
    initialDelaySeconds: 0
    periodSeconds: 30
    timeoutSeconds: 30
    successThreshold: 1
    failureThreshold: 3


#############################################################################################################################
#                                            Front Minimum components                                                       #
#############################################################################################################################

# -- FrontCore
## If one frontend component is enabled: true, it will enable by default the frontCore components (gateway, api & api-identity-manager)
# List of front components :
# - gateway
# - api
# - apiIdentityManager
# - apiB2c
# - apiReferential
# - b2c
# - b2b
# - customerBackend
# - customerFrontend
# - web
#
# If you enable one front component, you must set mongodb.isManaged: true
frontCore:
  enabled: false
  config: {}

  gateway:
    image:
      # -- gateway image repository
      name: coog-gateway

    # -- Configure environement variables for this component
    config:
      COOG_MODULE: true
      GOOGLE_MODULE: false
      FACEBOOK_MODULE: false
      COOG_TOKEN_MODULE: true
      COOG_GATEWAY_PORT: 8000
      COOG_GATEWAY_BASE_PATH: /gateway

    ingress:
      # -- Default host for the ingress resource for gateway containers
      hosts:
        - paths:
            - /gateway(/|$)(.*)
      
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: '/$2'
      
      nginx:
        whiteList:
          publicCidr: []

    securityContext: {}
      # runAsUser: ""

    # -- gateway containers resource requests and limits
    resources:
      limits:
        cpu: 100m
        memory: 100Mi
      requests:
        cpu: 100m
        memory: 100Mi


  api:
    image:
      # -- api-v2 image repository
      name: coog-api

    # -- Configure environement variables for this component
    config: {}

    securityContext: {}
      # runAsUser: ""

    # -- api containers resource requests and limits
    resources:
      limits:
        cpu: 500m
        memory: 100Mi
      requests:
        cpu: 500m
        memory: 100Mi



  apiIdentityManager:
    image:
      # -- api-identity-manager image repository
      name: coog-api-identity-manager
    
    # -- Configure environement variables for this component
    config: {}

    securityContext: {}
      # runAsUser: ""

    # -- apiIdentityManager containers' resource requests and limits
    resources:
      limits:
        cpu: 50m
        memory: 70Mi
      requests:
        cpu: 50m
        memory: 70Mi


#############################################################################################################################
#                                            Front Additional components                                                    #
#############################################################################################################################

##############################
#      Components B2B        #
##############################

b2b:
  enabled: false

  image:
    # -- b2b image repository
    name: coog-b2b

  ingress:
    # -- Default host for the ingress resource for gateway containers
    hosts:
      - paths:
          - /portal(/|$)(.*)
    
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: '/$2'
    
    nginx:
      whiteList:
        publicCidr: []

  securityContext: {}
    # runAsUser: ""

  # -- b2b containers' resource requests and limits
  resources:
    limits:
      cpu: 250m
      memory: 50Mi
    requests:
      cpu: 250m
      memory: 50Mi



web:
  enabled: false

  image:
    # -- web image repository
    name: coog-web

  # -- Configure environement variables for this component
  config:
    COOG_API_API_PATH: /web/api
    COOG_API_APP_PATH: /web

  securityContext: {}
    # runAsUser: ""

  # -- web containers' resource requests and limits
  resources:
    limits:
      cpu: 500m
      memory: 200Mi
    requests:
      cpu: 500m
      memory: 200Mi



apiReferential:
  # -- Deploy apiReferential container(s)
  enabled: false

  image:
    # -- apiReferential image repository
    name: coog-api-referential

  # -- Configure environement variables for this component
  config: {}

  securityContext: {}
    # runAsUser: ""

  # -- apiReferential containers' resource requests and limits
  resources:
    limits:
      cpu: 200m
      memory: 400Mi
    requests:
      cpu: 200m
      memory: 400Mi



##############################
#      Components B2C        #
##############################

b2c:
  # -- Deploy b2c + apiB2c container(s)
  enabled: false

  image:
    # -- b2c image repository
    name: coog-app-b2c

  ingress:
    # -- Default host for the ingress resource for gateway containers
    hosts:
      - paths:
          - /customers/myspace(/|$)(.*)
    
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: '/$2'
    
    nginx:
      whiteList:
        publicCidr: []

  securityContext: {}
    # runAsUser: ""

  # -- b2c containers' resource requests and limits
  resources:
    limits:
      cpu: 50m
      memory: 50Mi
    requests:
      cpu: 50m
      memory: 50Mi



customerBackend:
  # -- Deploy b2b container(s)
  enabled: false

  image:
    # -- b2b image repository
    name: coog-customer-backend

  # -- Configure environement variables for this component
  config:
    DATABASE_NAME: strapi

  ingress:
    # -- Default host for the ingress resource for gateway containers
    hosts:
      - paths:
          - /v1/customer(/|$)(.*)
    
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: '/$2'

    nginx:
      whiteList:
        publicCidr: []

  securityContext: {}
    # runAsUser: ""

  # -- b2b containers' resource requests and limits
  resources:
    limits:
      cpu: 400m
      memory: 300Mi
    requests:
      cpu: 400m
      memory: 300Mi

  initContainers:
    resources:
      limits:
        cpu: 400m
        memory: 500Mi
      requests:
        cpu: 400m
        memory: 500Mi
  


customerFrontend:
  # -- Deploy customerFrontend container(s)
  enabled: false

  image:
    # -- customerFrontend image repository
    name: coog-customer-frontend

  # -- Configure environement variables for this component
  config: {}

  ingress:
    # -- Default host for the ingress resource for gateway containers
    hosts:
      - paths:
          - /customer(/|$)(.*)
    
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: '/$2'

    nginx:
      whiteList:
        publicCidr: []

  securityContext: {}
    # runAsUser: ""

  # -- customerFrontend containers' resource requests and limits
  resources:
    limits:
      cpu: 100m
      memory: 100Mi
    requests:
      cpu: 100m
      memory: 100Mi

  initContainers:
    resources:
      limits:
        cpu: 400m
        memory: 2000Mi
      requests:
        cpu: 400m
        memory: 2000Mi



# -- Is enable if one off following front component is enable :
# - b2c
# - customerBackend
# - customerFrontend
apiB2c:
  image:
    # -- apiB2c image repository
    name: coog-api-b2c

  # -- Configure environement variables for this component
  config: {}

  securityContext: {}
    # runAsUser: ""

  # -- apiB2c containers' resource requests and limits
  resources:
    limits:
      cpu: 50m
      memory: 50Mi
    requests:
      cpu: 50m
      memory: 50Mi
