# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: Test b2c deployment
templates:
  - b2c/deployment.yaml
  - configmap-global.yaml
  - secret-global.yaml
release:
  name: test # Do not edit
  namespace: test
capabilities:
  majorVersion: 1
  minorVersion: 24
tests:
  - it: Test metadata & template
    template: b2c/deployment.yaml
    set:
      b2c:
        enabled: true
      extraEnvVar:
        ENABLE_GLOBAL_CONFIGMAP: foo
      imageCredentials:
        name: test-registry
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.imagePullSecrets
          content:
            name: test-registry
      - equal:
          path: metadata.name
          value: test-coog-b2c
      - isNotNull:
          path: spec.replicas
      - matchRegex:
          path: spec.strategy.type
          pattern: ^(RollingUpdate|Recreate)$
      - equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: coog-b2c
      - equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: test
      - equal:
          path: metadata.labels["app.kubernetes.io/managed-by"]
          value: Helm
      - matchRegex:
          path: metadata.labels["app.kubernetes.io/version"]
          pattern: coog-.*$
      - equal:
          path: spec.selector.matchLabels["app.kubernetes.io/name"]
          value: coog-b2c
      - equal:
          path: spec.selector.matchLabels["app.kubernetes.io/instance"]
          value: test
      # [Start] Check checksum configuration - auto update pods when there is a change in configmap & secrets
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/configmap-global"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/secret-global"]
      # [End] Check checksum configuration - auto update pods when there is a change in configmap & secrets

  - it: Test disabled configmaps, secrets & checksums
    template: b2c/deployment.yaml
    set:
      extraEnvVar: {}
      b2c:
        enabled: true
      secrets:
        extraEnvVar: {}
    asserts:
      - notExists:
          path: spec.template.metadata.annotations["checksum/configmap-global"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/secret-global"]
      # [Start] Check environment files
      - notContains:
          path: spec.template.spec.containers[?(@.name == "coog-b2c")].envFrom
          content:
            configMapRef:
              name: test-coog-global-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog-b2c")].envFrom
          content:
            secretRef:
              name: test-coog-global-configuration
      # [End] Check environment files

  - it: Test Container
    template: b2c/deployment.yaml
    set:
      b2c:
        enabled: true
      extraEnvVar:
        ENABLE_GLOBAL_CONFIGMAP: foo
    asserts:
      # Check Containers pod image
      - equal:
          path: spec.template.spec.containers[?(@.name == "coog-b2c")].image
          value: cooghub/coog-app-b2c:changeme
      - matchRegex:
          path: spec.template.spec.containers[?(@.name == "coog-b2c")].imagePullPolicy
          pattern: ^(Always|Never|IfNotPresent)$
      # [Start] Check environment files
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog-b2c")].envFrom
          content:
            configMapRef:
              name: test-coog-global-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog-b2c")].envFrom
          content:
            secretRef:
              name: test-coog-global-configuration
      # [End] Check environment files
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog-b2c")].ports
          content:
            name: http
            containerPort: 5000
      # [Start] Check resources limites & requests
      - matchRegex:
          path: spec.template.spec.containers[?(@.name == "coog-b2c")].resources.limits.cpu
          pattern: ^([0-9]{1,2}([.][0-9]+)?|[0-9]{1,5}m)$
      - matchRegex:
          path: spec.template.spec.containers[?(@.name == "coog-b2c")].resources.limits.memory
          pattern: ^([0-9]+(Ei|E|Pi|P|Ti|T|Gi|G|Mi|M|Ki|k|m)?)$
      - matchRegex:
          path: spec.template.spec.containers[?(@.name == "coog-b2c")].resources.requests.cpu
          pattern: ^([0-9]{1,2}([.][0-9]+)?|[0-9]{1,5}m)$
      - matchRegex:
          path: spec.template.spec.containers[?(@.name == "coog-b2c")].resources.requests.memory
          pattern: ^([0-9]+(Ei|E|Pi|P|Ti|T|Gi|G|Mi|M|Ki|k|m)?)$
      # [End] Check resources limites & requests

  - it: Test Global components configuration
    template: b2c/deployment.yaml
    set:
      b2c:
        enabled: true
      replicaCount: 2
      strategy:
        type: Recreate
      image:
        repository: global-docker-repository
        tag: global-docker-tag
        pullPolicy: Always
      securityContext:
        runAsUser: 1003
        runAsGroup: 1003
    asserts:
      - equal:
          path: spec.replicas
          value: 2
      - equal:
          path: spec.strategy.type
          value: Recreate
      - equal:
          path: spec.template.spec.containers[?(@.name == "coog-b2c")].image
          value: global-docker-repository/coog-app-b2c:global-docker-tag
      - equal:
          path: spec.template.spec.containers[?(@.name == "coog-b2c")].imagePullPolicy
          value: Always
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1003
      - equal:
          path: spec.template.spec.securityContext.runAsGroup
          value: 1003

  - it: Test specific component configuration
    template: b2c/deployment.yaml
    set:
      b2c:
        enabled: true
        replicaCount: 3
        strategy:
          type: RollingUpdate
        image:
          repository: specific-docker-repository
          tag: specific-docker-tag
          pullPolicy: Never
        securityContext:
          runAsUser: 1001
          runAsGroup: 1001
    asserts:
      - equal:
          path: spec.replicas
          value: 3
      - equal:
          path: spec.strategy.type
          value: RollingUpdate
      - equal:
          path: spec.template.spec.containers[?(@.name == "coog-b2c")].image
          value: specific-docker-repository/coog-app-b2c:specific-docker-tag
      - equal:
          path: spec.template.spec.containers[?(@.name == "coog-b2c")].imagePullPolicy
          value: Never
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1001
      - equal:
          path: spec.template.spec.securityContext.runAsGroup
          value: 1001

  - it: Test b2c enabled deployment
    template: b2c/deployment.yaml
    set:
      b2c:
        enabled: true
    asserts:
      - hasDocuments:
          count: 1

  - it: Test not enabled deployment (1/2)
    template: b2c/deployment.yaml
    asserts:
      - hasDocuments:
          count: 0

  - it: Test not enabled deployment (2/2)
    template: b2c/deployment.yaml
    set:
      b2c:
        enabled: false
    asserts:
      - hasDocuments:
          count: 0