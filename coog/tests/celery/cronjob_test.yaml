# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: Test celery cronjob deployment
templates:
  - celery/configmap.yaml
  - celery/cronjob.yaml
  - celery/secret.yaml
  - configmap-global.yaml
  - configmap-backcore.yaml
  - secret-global.yaml
  - secret-backcore.yaml
  - secret-postgresql.yaml
release:
  name: test # Do not edit
  namespace: test
capabilities:
  majorVersion: 1
  minorVersion: 24
tests:
  - it: Test metadata & template
    template: celery/cronjob.yaml
    set:
      extraEnvVar:
        ENABLE_GLOBAL_CONFIGMAP: foo
      secrets:
        backCore:
          celery:
            extraEnvVar:
              ENABLE_CELERY_SECRET: foo
      imageCredentials:
        name: test-registry
    asserts:
      - isKind:
          of: CronJob
      - contains:
          path: spec.jobTemplate.spec.template.spec.imagePullSecrets
          content:
            name: test-registry
      - equal:
          path: metadata.name
          value: test-coog-celery-daily
      - equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: coog-celery
      - equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: test
      - equal:
          path: metadata.labels["app.kubernetes.io/managed-by"]
          value: Helm
      - matchRegex:
          path: metadata.labels["app.kubernetes.io/version"]
          pattern: coog-.*$

  - it: Test Container
    template: celery/cronjob.yaml
    set:
      extraEnvVar:
        ENABLE_GLOBAL_CONFIGMAP: foo
      secrets:
        backCore:
          celery:
            extraEnvVar:
              ENABLE_CELERY_SECRET: foo
    asserts:
      # Check Containers pod image
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].image
          value: cooghub/coog:changeme
      - matchRegex:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].imagePullPolicy
          pattern: ^(Always|Never|IfNotPresent)$
      # [Start] Check environment files - apply variables on initContainer from configmap & secrets
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].envFrom
          content:
            configMapRef:
              name: test-coog-global-configuration
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].envFrom
          content:
            configMapRef:
              name: test-coog-backcore-configuration
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].envFrom
          content:
            configMapRef:
              name: test-coog-celery-configuration
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].envFrom
          content:
            secretRef:
              name: test-coog-global-configuration
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].envFrom
          content:
            secretRef:
              name: test-coog-backcore-configuration
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].envFrom
          content:
            secretRef:
              name: test-coog-celery-configuration
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].envFrom
          content:
            secretRef:
              name: test-coog-postgresql
      # [End] Check environment files - apply variables on initContainer from configmap & secrets
      # [Start] Check resources limites & requests
      - matchRegex:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].resources.limits.cpu
          pattern: ^([0-9]{1,2}([.][0-9]+)?|[0-9]{1,5}m)$
      - matchRegex:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].resources.limits.memory
          pattern: ^([0-9]+(Ei|E|Pi|P|Ti|T|Gi|G|Mi|M|Ki|k|m)?)$
      - matchRegex:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].resources.requests.cpu
          pattern: ^([0-9]{1,2}([.][0-9]+)?|[0-9]{1,5}m)$
      - matchRegex:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].resources.requests.memory
          pattern: ^([0-9]+(Ei|E|Pi|P|Ti|T|Gi|G|Mi|M|Ki|k|m)?)$
      # [End] Check resources limites & requests

  - it: Test Volumes
    template: celery/cronjob.yaml
    asserts:
      - equal:
          path: spec.jobTemplate.spec.template.spec.volumes[?(@.name == "test-workspace-io")].persistentVolumeClaim.claimName
          value: test-workspace-io
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].volumeMounts
          content:
            name: test-workspace-io
            mountPath: /workspace/io
            readOnly: false

  - it: Test Global components configuration
    template: celery/cronjob.yaml
    set:
      image:
        repository: global-docker-repository
        tag: global-docker-tag
        pullPolicy: Always
      securityContext:
        runAsUser: 1003
        runAsGroup: 1003
      # Remove default values in backCore to test global value
      backCore:
        securityContext:
          runAsUser: ""
          runAsGroup: ""
    asserts:
      - equal:
          path: spec.schedule
          value: "0 20 * * 1-5"
      - equal:
          path: spec.failedJobsHistoryLimit
          value: 5
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].image
          value: global-docker-repository/coog:global-docker-tag
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].imagePullPolicy
          value: Always
      - equal:
          path: spec.jobTemplate.spec.template.spec.securityContext.runAsUser
          value: 1003
      - equal:
          path: spec.jobTemplate.spec.template.spec.securityContext.runAsGroup
          value: 1003
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].command
          value:
            - ep
            - daily_v2

  - it: Test specific component configuration
    template: celery/cronjob.yaml
    set:
      backCore:
        image:
          repository: specific-docker-repository
          tag: specific-docker-tag
          pullPolicy: Never
        securityContext:
          runAsUser: 1001
          runAsGroup: 1001
        celery:
          cronJob:
            schedule: "0 18 * * *"
            failedJobsHistoryLimit: 10
            backendConfiguration: false
            workDays: 2
            workDaysConfig: test
    asserts:
      - equal:
          path: spec.schedule
          value: "0 18 * * *"
      - equal:
          path: spec.failedJobsHistoryLimit
          value: 10
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].image
          value: specific-docker-repository/coog:specific-docker-tag
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].imagePullPolicy
          value: Never
      - equal:
          path: spec.jobTemplate.spec.template.spec.securityContext.runAsUser
          value: 1001
      - equal:
          path: spec.jobTemplate.spec.template.spec.securityContext.runAsGroup
          value: 1001
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "coog-celery-daily")].command
          value:
            - ep
            - daily
            - "2"
            - test

