# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: Test celery deployment
templates:
  - celery/configmap.yaml
  - celery/deployment.yaml
  - celery/secret.yaml
  - configmap-global.yaml
  - configmap-backcore.yaml
  - secret-global.yaml
  - secret-backcore.yaml
  - secret-postgresql.yaml
release:
  name: test # Do not edit
  namespace: test
capabilities:
  majorVersion: 1
  minorVersion: 24
tests:
  - it: Test metadata & template
    template: celery/deployment.yaml
    set:
      extraEnvVar:
        ENABLE_GLOBAL_CONFIGMAP: foo
      secrets:
        backCore:
          celery:
            extraEnvVar:
              ENABLE_CELERY_SECRET: foo
      imageCredentials:
        name: test-registry
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.imagePullSecrets
          content:
            name: test-registry
      - equal:
          path: metadata.name
          value: test-coog-celery
      - equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: coog-celery
      - equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: test
      - equal:
          path: metadata.labels["app.kubernetes.io/managed-by"]
          value: Helm
      - matchRegex:
          path: metadata.labels["app.kubernetes.io/version"]
          pattern: coog-.*$
      - equal:
          path: spec.selector.matchLabels["app.kubernetes.io/name"]
          value: coog-celery
      - equal:
          path: spec.selector.matchLabels["app.kubernetes.io/instance"]
          value: test
      # [Start] Check checksum configuration - auto update pods when there is a change in configmap & secrets
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/configmap-global"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/configmap-backcore"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/configmap"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/secret-global"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/secret-backcore"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/secret"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/secret-postgresql"]
      # [End] Check checksum configuration - auto update pods when there is a change in configmap & secrets


  - it: Test Container
    template: celery/deployment.yaml
    set:
      extraEnvVar:
        ENABLE_GLOBAL_CONFIGMAP: foo
      secrets:
        backCore:
          celery:
            extraEnvVar:
              ENABLE_CELERY_SECRET: foo
    asserts:
      # Check Containers pod image
      - equal:
          path: spec.template.spec.containers[?(@.name == "coog-celery")].image
          value: cooghub/coog:changeme
      # [Start] Check environment files - apply variables on initContainer from configmap & secrets
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog-celery")].envFrom
          content:
            configMapRef:
              name: test-coog-global-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog-celery")].envFrom
          content:
            configMapRef:
              name: test-coog-backcore-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog-celery")].envFrom
          content:
            configMapRef:
              name: test-coog-celery-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog-celery")].envFrom
          content:
            secretRef:
              name: test-coog-global-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog-celery")].envFrom
          content:
            secretRef:
              name: test-coog-backcore-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog-celery")].envFrom
          content:
            secretRef:
              name: test-coog-celery-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog-celery")].envFrom
          content:
            secretRef:
              name: test-coog-postgresql
      # [End] Check environment files - apply variables on initContainer from configmap & secrets
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog-celery")].ports
          content:
            name: http
            containerPort: 8000
      # [Start] Check resources limites & requests
      - matchRegex:
          path: spec.template.spec.containers[?(@.name == "coog-celery")].resources.limits.cpu
          pattern: ^([0-9]{1,2}([.][0-9]+)?|[0-9]{1,5}m)$
      - matchRegex:
          path: spec.template.spec.containers[?(@.name == "coog-celery")].resources.limits.memory
          pattern: ^([0-9]+(Ei|E|Pi|P|Ti|T|Gi|G|Mi|M|Ki|k|m)?)$
      - matchRegex:
          path: spec.template.spec.containers[?(@.name == "coog-celery")].resources.requests.cpu
          pattern: ^([0-9]{1,2}([.][0-9]+)?|[0-9]{1,5}m)$
      - matchRegex:
          path: spec.template.spec.containers[?(@.name == "coog-celery")].resources.requests.memory
          pattern: ^([0-9]+(Ei|E|Pi|P|Ti|T|Gi|G|Mi|M|Ki|k|m)?)$
      # [End] Check resources limites & requests


  - it: Test Volumes
    template: celery/deployment.yaml
    set:
      backCore:
        persistentVolume:
          enabled: true
          existingClaim: test-workspace-io
    asserts:
      - equal:
          path: spec.template.spec.volumes[?(@.name == "test-workspace-io")].persistentVolumeClaim.claimName
          value: test-workspace-io
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog-celery")].volumeMounts
          content:
            name: test-workspace-io
            mountPath: /workspace/io
            readOnly: false
