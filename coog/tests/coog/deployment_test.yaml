# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: Test coog deployment
templates:
  - coog/configmap.yaml
  - coog/deployment.yaml
  - coog/secret.yaml
  - configmap-global.yaml
  - configmap-backcore.yaml
  - secret-global.yaml
  - secret-backcore.yaml
  - secret-postgresql.yaml
release:
  name: test # Do not edit
  namespace: test
capabilities:
  majorVersion: 1
  minorVersion: 24
tests:
  - it: Test metadata & template
    template: coog/deployment.yaml
    set:
      extraEnvVar:
        ENABLE_GLOBAL_CONFIGMAP: foo
      secrets:
        backCore:
          coog:
            extraEnvVar:
              ENABLE_COOG_SECRET: foo
      imageCredentials:
        name: test-registry
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.imagePullSecrets
          content:
            name: test-registry
      - equal:
          path: metadata.name
          value: test-coog
      - isNotNull:
          path: spec.replicas
      - matchRegex:
          path: spec.strategy.type
          pattern: ^(RollingUpdate|Recreate)$
      - equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: coog
      - equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: test
      - equal:
          path: metadata.labels["app.kubernetes.io/managed-by"]
          value: Helm
      - matchRegex:
          path: metadata.labels["app.kubernetes.io/version"]
          pattern: coog-.*$
      - equal:
          path: spec.selector.matchLabels["app.kubernetes.io/name"]
          value: coog
      - equal:
          path: spec.selector.matchLabels["app.kubernetes.io/instance"]
          value: test
      # [Start] Check checksum configuration - auto update pods when there is a change in configmap & secrets
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/configmap-global"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/configmap-backcore"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/configmap"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/secret-global"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/secret-backcore"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/secret"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/secret-postgresql"]
      # [End] Check checksum configuration - auto update pods when there is a change in configmap & secrets

  - it: Test disabled configmaps, secrets & checksums
    template: coog/deployment.yaml
    set:
      extraEnvVar: {}
      secrets:
        extraEnvVar: {}
        backCore:
          coog:
            extraEnvVar: {}
    asserts:
      - notExists:
          path: spec.template.metadata.annotations["checksum/configmap-global"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/configmap-backcore"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/configmap"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/secret-global"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/secret-backcore"]
      - notExists:
          path: spec.template.metadata.annotations["checksum/secret"]
      - isNotEmpty:
          path: spec.template.metadata.annotations["checksum/secret-postgresql"]
      # [Start] Check environment files
      - notContains:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].envFrom
          content:
            configMapRef:
              name: test-coog-global-configuration
      - contains:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].envFrom
          content:
            configMapRef:
              name: test-coog-backcore-configuration
      - contains:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].envFrom
          content:
            configMapRef:
              name: test-coog-configuration
      - contains:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].envFrom
          content:
            secretRef:
              name: test-coog-global-configuration
      - contains:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].envFrom
          content:
            secretRef:
              name: test-coog-backcore-configuration
      - notContains:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].envFrom
          content:
            secretRef:
              name: test-coog-configuration
      - contains:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].envFrom
          content:
            secretRef:
              name: test-coog-postgresql
      - notContains:
          path: spec.template.spec.containers[?(@.name == "coog")].envFrom
          content:
            configMapRef:
              name: test-coog-global-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog")].envFrom
          content:
            configMapRef:
              name: test-coog-backcore-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog")].envFrom
          content:
            configMapRef:
              name: test-coog-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog")].envFrom
          content:
            secretRef:
              name: test-coog-global-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog")].envFrom
          content:
            secretRef:
              name: test-coog-backcore-configuration
      - notContains:
          path: spec.template.spec.containers[?(@.name == "coog")].envFrom
          content:
            secretRef:
              name: test-coog-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog")].envFrom
          content:
            secretRef:
              name: test-coog-postgresql
      # [End] Check environment files

  - it: Test InitContainer
    template: coog/deployment.yaml
    set:
      extraEnvVar:
        ENABLE_GLOBAL_CONFIGMAP: foo
      secrets:
        backCore:
          coog:
            extraEnvVar:
              ENABLE_COOG_SECRET: foo
    asserts:
      # Check initContainers pod image
      - equal:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].image
          value: cooghub/coog:changeme
      # [Start] Check environment files
      - contains:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].envFrom
          content:
            configMapRef:
              name: test-coog-global-configuration
      - contains:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].envFrom
          content:
            configMapRef:
              name: test-coog-backcore-configuration
      - contains:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].envFrom
          content:
            configMapRef:
              name: test-coog-configuration
      - contains:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].envFrom
          content:
            secretRef:
              name: test-coog-global-configuration
      - contains:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].envFrom
          content:
            secretRef:
              name: test-coog-backcore-configuration
      - contains:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].envFrom
          content:
            secretRef:
              name: test-coog-configuration
      - contains:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].envFrom
          content:
            secretRef:
              name: test-coog-postgresql
      # [End] Check environment files
      - contains:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].ports
          content:
            name: http
            containerPort: 8000
      # [Start] Check resources limites & requests
      - matchRegex:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].resources.limits.cpu
          pattern: ^([0-9]{1,2}([.][0-9]+)?|[0-9]{1,5}m)$
      - matchRegex:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].resources.limits.memory
          pattern: ^([0-9]+(Ei|E|Pi|P|Ti|T|Gi|G|Mi|M|Ki|k|m)?)$
      - matchRegex:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].resources.requests.cpu
          pattern: ^([0-9]{1,2}([.][0-9]+)?|[0-9]{1,5}m)$
      - matchRegex:
          path: spec.template.spec.initContainers[?(@.name == "coog-module-update")].resources.requests.memory
          pattern: ^([0-9]+(Ei|E|Pi|P|Ti|T|Gi|G|Mi|M|Ki|k|m)?)$
      # [End] Check resources limites & requests

  - it: Test Container
    template: coog/deployment.yaml
    set:
      extraEnvVar:
        ENABLE_GLOBAL_CONFIGMAP: foo
      secrets:
        backCore:
          coog:
            extraEnvVar:
              ENABLE_COOG_SECRET: foo
    asserts:
      # Check Containers pod image
      - equal:
          path: spec.template.spec.containers[?(@.name == "coog")].image
          value: cooghub/coog:changeme
      - matchRegex:
          path: spec.template.spec.containers[?(@.name == "coog")].imagePullPolicy
          pattern: ^(Always|Never|IfNotPresent)$
      # [Start] Check environment files
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog")].envFrom
          content:
            configMapRef:
              name: test-coog-global-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog")].envFrom
          content:
            configMapRef:
              name: test-coog-backcore-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog")].envFrom
          content:
            configMapRef:
              name: test-coog-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog")].envFrom
          content:
            secretRef:
              name: test-coog-global-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog")].envFrom
          content:
            secretRef:
              name: test-coog-backcore-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog")].envFrom
          content:
            secretRef:
              name: test-coog-configuration
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog")].envFrom
          content:
            secretRef:
              name: test-coog-postgresql
      # [End] Check environment files
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog")].ports
          content:
            name: http
            containerPort: 8000
      # [Start] Check resources limites & requests
      - matchRegex:
          path: spec.template.spec.containers[?(@.name == "coog")].resources.limits.cpu
          pattern: ^([0-9]{1,2}([.][0-9]+)?|[0-9]{1,5}m)$
      - matchRegex:
          path: spec.template.spec.containers[?(@.name == "coog")].resources.limits.memory
          pattern: ^([0-9]+(Ei|E|Pi|P|Ti|T|Gi|G|Mi|M|Ki|k|m)?)$
      - matchRegex:
          path: spec.template.spec.containers[?(@.name == "coog")].resources.requests.cpu
          pattern: ^([0-9]{1,2}([.][0-9]+)?|[0-9]{1,5}m)$
      - matchRegex:
          path: spec.template.spec.containers[?(@.name == "coog")].resources.requests.memory
          pattern: ^([0-9]+(Ei|E|Pi|P|Ti|T|Gi|G|Mi|M|Ki|k|m)?)$
      # [End] Check resources limites & requests

  - it: Test Volumes
    template: coog/deployment.yaml
    set:
      backCore:
        persistentVolume:
          enabled: true
          existingClaim: test-workspace-io
    asserts:
      - equal:
          path: spec.template.spec.volumes[?(@.name == "test-workspace-io")].persistentVolumeClaim.claimName
          value: test-workspace-io
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog")].volumeMounts
          content:
            name: test-workspace-io
            mountPath: /workspace/io
            readOnly: false

  - it: Test specific environment variables
    template: coog/deployment.yaml
    set:
      customerBackend:
        enabled: true
      customerFrontend:
        enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "coog")].env
          content:
            name: TRYTOND_B2C_API__SHARED_SECRET
            valueFrom:
              secretKeyRef:
                name: test-coog-customer-backend-configuration
                key: COOG_TOKEN_SHARED_SECRET

  - it: Test Global components configuration
    template: coog/deployment.yaml
    set:
      replicaCount: 2
      strategy:
        type: Recreate
      image:
        repository: global-docker-repository
        tag: global-docker-tag
        pullPolicy: Always
      securityContext:
        runAsUser: 1003
    asserts:
      - equal:
          path: spec.replicas
          value: 2
      - equal:
          path: spec.strategy.type
          value: Recreate
      - equal:
          path: spec.template.spec.containers[?(@.name == "coog")].image
          value: global-docker-repository/coog:global-docker-tag
      - equal:
          path: spec.template.spec.containers[?(@.name == "coog")].imagePullPolicy
          value: Always
      - equal:
          path: spec.template.spec.containers[?(@.name == "coog")].securityContext.runAsUser
          value: 1003

  - it: Test specific component configuration
    template: coog/deployment.yaml
    set:
      backCore:
        strategy:
          type: RollingUpdate
        image:
          repository: specific-docker-repository
          tag: specific-docker-tag
          pullPolicy: Never
        securityContext:
          runAsUser: 1001
        coog:
          replicaCount: 3
    asserts:
      - equal:
          path: spec.replicas
          value: 3
      - equal:
          path: spec.strategy.type
          value: RollingUpdate
      - equal:
          path: spec.template.spec.containers[?(@.name == "coog")].image
          value: specific-docker-repository/coog:specific-docker-tag
      - equal:
          path: spec.template.spec.containers[?(@.name == "coog")].imagePullPolicy
          value: Never
      - equal:
          path: spec.template.spec.containers[?(@.name == "coog")].securityContext.runAsUser
          value: 1001
